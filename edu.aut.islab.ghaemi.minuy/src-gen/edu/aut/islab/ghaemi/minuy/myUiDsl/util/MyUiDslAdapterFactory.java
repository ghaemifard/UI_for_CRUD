/**
 * generated by Xtext 2.10.0
 */
package edu.aut.islab.ghaemi.minuy.myUiDsl.util;

import edu.aut.islab.ghaemi.minuy.myUiDsl.*;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.common.notify.impl.AdapterFactoryImpl;

import org.eclipse.emf.ecore.EObject;

/**
 * <!-- begin-user-doc -->
 * The <b>Adapter Factory</b> for the model.
 * It provides an adapter <code>createXXX</code> method for each class of the model.
 * <!-- end-user-doc -->
 * @see edu.aut.islab.ghaemi.minuy.myUiDsl.MyUiDslPackage
 * @generated
 */
public class MyUiDslAdapterFactory extends AdapterFactoryImpl
{
  /**
   * The cached model package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static MyUiDslPackage modelPackage;

  /**
   * Creates an instance of the adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MyUiDslAdapterFactory()
  {
    if (modelPackage == null)
    {
      modelPackage = MyUiDslPackage.eINSTANCE;
    }
  }

  /**
   * Returns whether this factory is applicable for the type of the object.
   * <!-- begin-user-doc -->
   * This implementation returns <code>true</code> if the object is either the model's package or is an instance object of the model.
   * <!-- end-user-doc -->
   * @return whether this factory is applicable for the type of the object.
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object object)
  {
    if (object == modelPackage)
    {
      return true;
    }
    if (object instanceof EObject)
    {
      return ((EObject)object).eClass().getEPackage() == modelPackage;
    }
    return false;
  }

  /**
   * The switch that delegates to the <code>createXXX</code> methods.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected MyUiDslSwitch<Adapter> modelSwitch =
    new MyUiDslSwitch<Adapter>()
    {
      @Override
      public Adapter caseModel(Model object)
      {
        return createModelAdapter();
      }
      @Override
      public Adapter caseHead(Head object)
      {
        return createHeadAdapter();
      }
      @Override
      public Adapter caseBody(Body object)
      {
        return createBodyAdapter();
      }
      @Override
      public Adapter caseNode(Node object)
      {
        return createNodeAdapter();
      }
      @Override
      public Adapter caseSelfRepeat(SelfRepeat object)
      {
        return createSelfRepeatAdapter();
      }
      @Override
      public Adapter caseAccessory(Accessory object)
      {
        return createAccessoryAdapter();
      }
      @Override
      public Adapter caseInnerFeature(InnerFeature object)
      {
        return createInnerFeatureAdapter();
      }
      @Override
      public Adapter caseInnerText(InnerText object)
      {
        return createInnerTextAdapter();
      }
      @Override
      public Adapter caseInnerStyle(InnerStyle object)
      {
        return createInnerStyleAdapter();
      }
      @Override
      public Adapter caseInnerClass(InnerClass object)
      {
        return createInnerClassAdapter();
      }
      @Override
      public Adapter caseClassName(ClassName object)
      {
        return createClassNameAdapter();
      }
      @Override
      public Adapter caseClassNameSec(ClassNameSec object)
      {
        return createClassNameSecAdapter();
      }
      @Override
      public Adapter caseInnerType(InnerType object)
      {
        return createInnerTypeAdapter();
      }
      @Override
      public Adapter caseCssStyles(CssStyles object)
      {
        return createCssStylesAdapter();
      }
      @Override
      public Adapter caseCssStyle(CssStyle object)
      {
        return createCssStyleAdapter();
      }
      @Override
      public Adapter caseBorder(Border object)
      {
        return createBorderAdapter();
      }
      @Override
      public Adapter caseColor(Color object)
      {
        return createColorAdapter();
      }
      @Override
      public Adapter caseBackColor(BackColor object)
      {
        return createBackColorAdapter();
      }
      @Override
      public Adapter casecolorDef(colorDef object)
      {
        return createcolorDefAdapter();
      }
      @Override
      public Adapter caseLiteralColor(LiteralColor object)
      {
        return createLiteralColorAdapter();
      }
      @Override
      public Adapter caseRgbaColor(RgbaColor object)
      {
        return createRgbaColorAdapter();
      }
      @Override
      public Adapter caseRval(Rval object)
      {
        return createRvalAdapter();
      }
      @Override
      public Adapter caseGval(Gval object)
      {
        return createGvalAdapter();
      }
      @Override
      public Adapter caseBval(Bval object)
      {
        return createBvalAdapter();
      }
      @Override
      public Adapter caseAval(Aval object)
      {
        return createAvalAdapter();
      }
      @Override
      public Adapter caseBorderRad(BorderRad object)
      {
        return createBorderRadAdapter();
      }
      @Override
      public Adapter casePos(Pos object)
      {
        return createPosAdapter();
      }
      @Override
      public Adapter caseFlt(Flt object)
      {
        return createFltAdapter();
      }
      @Override
      public Adapter caseClr(Clr object)
      {
        return createClrAdapter();
      }
      @Override
      public Adapter caseDisp(Disp object)
      {
        return createDispAdapter();
      }
      @Override
      public Adapter caseVerAl(VerAl object)
      {
        return createVerAlAdapter();
      }
      @Override
      public Adapter caseOFlow(OFlow object)
      {
        return createOFlowAdapter();
      }
      @Override
      public Adapter caseWid(Wid object)
      {
        return createWidAdapter();
      }
      @Override
      public Adapter caseH8(H8 object)
      {
        return createH8Adapter();
      }
      @Override
      public Adapter caseCoord(Coord object)
      {
        return createCoordAdapter();
      }
      @Override
      public Adapter caseMarg(Marg object)
      {
        return createMargAdapter();
      }
      @Override
      public Adapter casePadd(Padd object)
      {
        return createPaddAdapter();
      }
      @Override
      public Adapter caseMinMaxValue(MinMaxValue object)
      {
        return createMinMaxValueAdapter();
      }
      @Override
      public Adapter caseMinVal(MinVal object)
      {
        return createMinValAdapter();
      }
      @Override
      public Adapter caseMaxVal(MaxVal object)
      {
        return createMaxValAdapter();
      }
      @Override
      public Adapter caseMidVal(MidVal object)
      {
        return createMidValAdapter();
      }
      @Override
      public Adapter caseFourAspect(FourAspect object)
      {
        return createFourAspectAdapter();
      }
      @Override
      public Adapter caseLeftAspect(LeftAspect object)
      {
        return createLeftAspectAdapter();
      }
      @Override
      public Adapter caseRightAspect(RightAspect object)
      {
        return createRightAspectAdapter();
      }
      @Override
      public Adapter caseUpAspect(UpAspect object)
      {
        return createUpAspectAdapter();
      }
      @Override
      public Adapter caseDownAspect(DownAspect object)
      {
        return createDownAspectAdapter();
      }
      @Override
      public Adapter defaultCase(EObject object)
      {
        return createEObjectAdapter();
      }
    };

  /**
   * Creates an adapter for the <code>target</code>.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param target the object to adapt.
   * @return the adapter for the <code>target</code>.
   * @generated
   */
  @Override
  public Adapter createAdapter(Notifier target)
  {
    return modelSwitch.doSwitch((EObject)target);
  }


  /**
   * Creates a new adapter for an object of class '{@link edu.aut.islab.ghaemi.minuy.myUiDsl.Model <em>Model</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edu.aut.islab.ghaemi.minuy.myUiDsl.Model
   * @generated
   */
  public Adapter createModelAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link edu.aut.islab.ghaemi.minuy.myUiDsl.Head <em>Head</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edu.aut.islab.ghaemi.minuy.myUiDsl.Head
   * @generated
   */
  public Adapter createHeadAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link edu.aut.islab.ghaemi.minuy.myUiDsl.Body <em>Body</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edu.aut.islab.ghaemi.minuy.myUiDsl.Body
   * @generated
   */
  public Adapter createBodyAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link edu.aut.islab.ghaemi.minuy.myUiDsl.Node <em>Node</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edu.aut.islab.ghaemi.minuy.myUiDsl.Node
   * @generated
   */
  public Adapter createNodeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link edu.aut.islab.ghaemi.minuy.myUiDsl.SelfRepeat <em>Self Repeat</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edu.aut.islab.ghaemi.minuy.myUiDsl.SelfRepeat
   * @generated
   */
  public Adapter createSelfRepeatAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link edu.aut.islab.ghaemi.minuy.myUiDsl.Accessory <em>Accessory</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edu.aut.islab.ghaemi.minuy.myUiDsl.Accessory
   * @generated
   */
  public Adapter createAccessoryAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link edu.aut.islab.ghaemi.minuy.myUiDsl.InnerFeature <em>Inner Feature</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edu.aut.islab.ghaemi.minuy.myUiDsl.InnerFeature
   * @generated
   */
  public Adapter createInnerFeatureAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link edu.aut.islab.ghaemi.minuy.myUiDsl.InnerText <em>Inner Text</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edu.aut.islab.ghaemi.minuy.myUiDsl.InnerText
   * @generated
   */
  public Adapter createInnerTextAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link edu.aut.islab.ghaemi.minuy.myUiDsl.InnerStyle <em>Inner Style</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edu.aut.islab.ghaemi.minuy.myUiDsl.InnerStyle
   * @generated
   */
  public Adapter createInnerStyleAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link edu.aut.islab.ghaemi.minuy.myUiDsl.InnerClass <em>Inner Class</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edu.aut.islab.ghaemi.minuy.myUiDsl.InnerClass
   * @generated
   */
  public Adapter createInnerClassAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link edu.aut.islab.ghaemi.minuy.myUiDsl.ClassName <em>Class Name</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edu.aut.islab.ghaemi.minuy.myUiDsl.ClassName
   * @generated
   */
  public Adapter createClassNameAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link edu.aut.islab.ghaemi.minuy.myUiDsl.ClassNameSec <em>Class Name Sec</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edu.aut.islab.ghaemi.minuy.myUiDsl.ClassNameSec
   * @generated
   */
  public Adapter createClassNameSecAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link edu.aut.islab.ghaemi.minuy.myUiDsl.InnerType <em>Inner Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edu.aut.islab.ghaemi.minuy.myUiDsl.InnerType
   * @generated
   */
  public Adapter createInnerTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link edu.aut.islab.ghaemi.minuy.myUiDsl.CssStyles <em>Css Styles</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edu.aut.islab.ghaemi.minuy.myUiDsl.CssStyles
   * @generated
   */
  public Adapter createCssStylesAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link edu.aut.islab.ghaemi.minuy.myUiDsl.CssStyle <em>Css Style</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edu.aut.islab.ghaemi.minuy.myUiDsl.CssStyle
   * @generated
   */
  public Adapter createCssStyleAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link edu.aut.islab.ghaemi.minuy.myUiDsl.Border <em>Border</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edu.aut.islab.ghaemi.minuy.myUiDsl.Border
   * @generated
   */
  public Adapter createBorderAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link edu.aut.islab.ghaemi.minuy.myUiDsl.Color <em>Color</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edu.aut.islab.ghaemi.minuy.myUiDsl.Color
   * @generated
   */
  public Adapter createColorAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link edu.aut.islab.ghaemi.minuy.myUiDsl.BackColor <em>Back Color</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edu.aut.islab.ghaemi.minuy.myUiDsl.BackColor
   * @generated
   */
  public Adapter createBackColorAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link edu.aut.islab.ghaemi.minuy.myUiDsl.colorDef <em>color Def</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edu.aut.islab.ghaemi.minuy.myUiDsl.colorDef
   * @generated
   */
  public Adapter createcolorDefAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link edu.aut.islab.ghaemi.minuy.myUiDsl.LiteralColor <em>Literal Color</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edu.aut.islab.ghaemi.minuy.myUiDsl.LiteralColor
   * @generated
   */
  public Adapter createLiteralColorAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link edu.aut.islab.ghaemi.minuy.myUiDsl.RgbaColor <em>Rgba Color</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edu.aut.islab.ghaemi.minuy.myUiDsl.RgbaColor
   * @generated
   */
  public Adapter createRgbaColorAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link edu.aut.islab.ghaemi.minuy.myUiDsl.Rval <em>Rval</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edu.aut.islab.ghaemi.minuy.myUiDsl.Rval
   * @generated
   */
  public Adapter createRvalAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link edu.aut.islab.ghaemi.minuy.myUiDsl.Gval <em>Gval</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edu.aut.islab.ghaemi.minuy.myUiDsl.Gval
   * @generated
   */
  public Adapter createGvalAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link edu.aut.islab.ghaemi.minuy.myUiDsl.Bval <em>Bval</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edu.aut.islab.ghaemi.minuy.myUiDsl.Bval
   * @generated
   */
  public Adapter createBvalAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link edu.aut.islab.ghaemi.minuy.myUiDsl.Aval <em>Aval</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edu.aut.islab.ghaemi.minuy.myUiDsl.Aval
   * @generated
   */
  public Adapter createAvalAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link edu.aut.islab.ghaemi.minuy.myUiDsl.BorderRad <em>Border Rad</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edu.aut.islab.ghaemi.minuy.myUiDsl.BorderRad
   * @generated
   */
  public Adapter createBorderRadAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link edu.aut.islab.ghaemi.minuy.myUiDsl.Pos <em>Pos</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edu.aut.islab.ghaemi.minuy.myUiDsl.Pos
   * @generated
   */
  public Adapter createPosAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link edu.aut.islab.ghaemi.minuy.myUiDsl.Flt <em>Flt</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edu.aut.islab.ghaemi.minuy.myUiDsl.Flt
   * @generated
   */
  public Adapter createFltAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link edu.aut.islab.ghaemi.minuy.myUiDsl.Clr <em>Clr</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edu.aut.islab.ghaemi.minuy.myUiDsl.Clr
   * @generated
   */
  public Adapter createClrAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link edu.aut.islab.ghaemi.minuy.myUiDsl.Disp <em>Disp</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edu.aut.islab.ghaemi.minuy.myUiDsl.Disp
   * @generated
   */
  public Adapter createDispAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link edu.aut.islab.ghaemi.minuy.myUiDsl.VerAl <em>Ver Al</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edu.aut.islab.ghaemi.minuy.myUiDsl.VerAl
   * @generated
   */
  public Adapter createVerAlAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link edu.aut.islab.ghaemi.minuy.myUiDsl.OFlow <em>OFlow</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edu.aut.islab.ghaemi.minuy.myUiDsl.OFlow
   * @generated
   */
  public Adapter createOFlowAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link edu.aut.islab.ghaemi.minuy.myUiDsl.Wid <em>Wid</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edu.aut.islab.ghaemi.minuy.myUiDsl.Wid
   * @generated
   */
  public Adapter createWidAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link edu.aut.islab.ghaemi.minuy.myUiDsl.H8 <em>H8</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edu.aut.islab.ghaemi.minuy.myUiDsl.H8
   * @generated
   */
  public Adapter createH8Adapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link edu.aut.islab.ghaemi.minuy.myUiDsl.Coord <em>Coord</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edu.aut.islab.ghaemi.minuy.myUiDsl.Coord
   * @generated
   */
  public Adapter createCoordAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link edu.aut.islab.ghaemi.minuy.myUiDsl.Marg <em>Marg</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edu.aut.islab.ghaemi.minuy.myUiDsl.Marg
   * @generated
   */
  public Adapter createMargAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link edu.aut.islab.ghaemi.minuy.myUiDsl.Padd <em>Padd</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edu.aut.islab.ghaemi.minuy.myUiDsl.Padd
   * @generated
   */
  public Adapter createPaddAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link edu.aut.islab.ghaemi.minuy.myUiDsl.MinMaxValue <em>Min Max Value</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edu.aut.islab.ghaemi.minuy.myUiDsl.MinMaxValue
   * @generated
   */
  public Adapter createMinMaxValueAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link edu.aut.islab.ghaemi.minuy.myUiDsl.MinVal <em>Min Val</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edu.aut.islab.ghaemi.minuy.myUiDsl.MinVal
   * @generated
   */
  public Adapter createMinValAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link edu.aut.islab.ghaemi.minuy.myUiDsl.MaxVal <em>Max Val</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edu.aut.islab.ghaemi.minuy.myUiDsl.MaxVal
   * @generated
   */
  public Adapter createMaxValAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link edu.aut.islab.ghaemi.minuy.myUiDsl.MidVal <em>Mid Val</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edu.aut.islab.ghaemi.minuy.myUiDsl.MidVal
   * @generated
   */
  public Adapter createMidValAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link edu.aut.islab.ghaemi.minuy.myUiDsl.FourAspect <em>Four Aspect</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edu.aut.islab.ghaemi.minuy.myUiDsl.FourAspect
   * @generated
   */
  public Adapter createFourAspectAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link edu.aut.islab.ghaemi.minuy.myUiDsl.LeftAspect <em>Left Aspect</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edu.aut.islab.ghaemi.minuy.myUiDsl.LeftAspect
   * @generated
   */
  public Adapter createLeftAspectAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link edu.aut.islab.ghaemi.minuy.myUiDsl.RightAspect <em>Right Aspect</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edu.aut.islab.ghaemi.minuy.myUiDsl.RightAspect
   * @generated
   */
  public Adapter createRightAspectAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link edu.aut.islab.ghaemi.minuy.myUiDsl.UpAspect <em>Up Aspect</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edu.aut.islab.ghaemi.minuy.myUiDsl.UpAspect
   * @generated
   */
  public Adapter createUpAspectAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link edu.aut.islab.ghaemi.minuy.myUiDsl.DownAspect <em>Down Aspect</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edu.aut.islab.ghaemi.minuy.myUiDsl.DownAspect
   * @generated
   */
  public Adapter createDownAspectAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for the default case.
   * <!-- begin-user-doc -->
   * This default implementation returns null.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @generated
   */
  public Adapter createEObjectAdapter()
  {
    return null;
  }

} //MyUiDslAdapterFactory
