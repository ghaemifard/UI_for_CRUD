/**
 * generated by Xtext 2.10.0
 */
package edu.aut.islab.ghaemi.minuy.myUiDsl;

import java.util.Arrays;
import java.util.Collections;
import java.util.List;

import org.eclipse.emf.common.util.Enumerator;

/**
 * <!-- begin-user-doc -->
 * A representation of the literals of the enumeration '<em><b>Inner Type Array</b></em>',
 * and utility methods for working with them.
 * <!-- end-user-doc -->
 * @see edu.aut.islab.ghaemi.minuy.myUiDsl.MyUiDslPackage#getInnerTypeArray()
 * @model
 * @generated
 */
public enum InnerTypeArray implements Enumerator
{
  /**
   * The '<em><b>Div</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #DIV_VALUE
   * @generated
   * @ordered
   */
  DIV(0, "Div", "Div"),

  /**
   * The '<em><b>Para</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #PARA_VALUE
   * @generated
   * @ordered
   */
  PARA(1, "Para", "Para"),

  /**
   * The '<em><b>Input</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #INPUT_VALUE
   * @generated
   * @ordered
   */
  INPUT(2, "Input", "Input"),

  /**
   * The '<em><b>Table</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #TABLE_VALUE
   * @generated
   * @ordered
   */
  TABLE(3, "Table", "Table"),

  /**
   * The '<em><b>Tr</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #TR_VALUE
   * @generated
   * @ordered
   */
  TR(4, "Tr", "Tr"),

  /**
   * The '<em><b>Td</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #TD_VALUE
   * @generated
   * @ordered
   */
  TD(5, "Td", "Td"),

  /**
   * The '<em><b>Img</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #IMG_VALUE
   * @generated
   * @ordered
   */
  IMG(6, "Img", "Img"),

  /**
   * The '<em><b>Form</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #FORM_VALUE
   * @generated
   * @ordered
   */
  FORM(7, "Form", "Form"),

  /**
   * The '<em><b>Button</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #BUTTON_VALUE
   * @generated
   * @ordered
   */
  BUTTON(8, "Button", "Button");

  /**
   * The '<em><b>Div</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <p>
   * If the meaning of '<em><b>Div</b></em>' literal object isn't clear,
   * there really should be more of a description here...
   * </p>
   * <!-- end-user-doc -->
   * @see #DIV
   * @model name="Div"
   * @generated
   * @ordered
   */
  public static final int DIV_VALUE = 0;

  /**
   * The '<em><b>Para</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <p>
   * If the meaning of '<em><b>Para</b></em>' literal object isn't clear,
   * there really should be more of a description here...
   * </p>
   * <!-- end-user-doc -->
   * @see #PARA
   * @model name="Para"
   * @generated
   * @ordered
   */
  public static final int PARA_VALUE = 1;

  /**
   * The '<em><b>Input</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <p>
   * If the meaning of '<em><b>Input</b></em>' literal object isn't clear,
   * there really should be more of a description here...
   * </p>
   * <!-- end-user-doc -->
   * @see #INPUT
   * @model name="Input"
   * @generated
   * @ordered
   */
  public static final int INPUT_VALUE = 2;

  /**
   * The '<em><b>Table</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <p>
   * If the meaning of '<em><b>Table</b></em>' literal object isn't clear,
   * there really should be more of a description here...
   * </p>
   * <!-- end-user-doc -->
   * @see #TABLE
   * @model name="Table"
   * @generated
   * @ordered
   */
  public static final int TABLE_VALUE = 3;

  /**
   * The '<em><b>Tr</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <p>
   * If the meaning of '<em><b>Tr</b></em>' literal object isn't clear,
   * there really should be more of a description here...
   * </p>
   * <!-- end-user-doc -->
   * @see #TR
   * @model name="Tr"
   * @generated
   * @ordered
   */
  public static final int TR_VALUE = 4;

  /**
   * The '<em><b>Td</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <p>
   * If the meaning of '<em><b>Td</b></em>' literal object isn't clear,
   * there really should be more of a description here...
   * </p>
   * <!-- end-user-doc -->
   * @see #TD
   * @model name="Td"
   * @generated
   * @ordered
   */
  public static final int TD_VALUE = 5;

  /**
   * The '<em><b>Img</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <p>
   * If the meaning of '<em><b>Img</b></em>' literal object isn't clear,
   * there really should be more of a description here...
   * </p>
   * <!-- end-user-doc -->
   * @see #IMG
   * @model name="Img"
   * @generated
   * @ordered
   */
  public static final int IMG_VALUE = 6;

  /**
   * The '<em><b>Form</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <p>
   * If the meaning of '<em><b>Form</b></em>' literal object isn't clear,
   * there really should be more of a description here...
   * </p>
   * <!-- end-user-doc -->
   * @see #FORM
   * @model name="Form"
   * @generated
   * @ordered
   */
  public static final int FORM_VALUE = 7;

  /**
   * The '<em><b>Button</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <p>
   * If the meaning of '<em><b>Button</b></em>' literal object isn't clear,
   * there really should be more of a description here...
   * </p>
   * <!-- end-user-doc -->
   * @see #BUTTON
   * @model name="Button"
   * @generated
   * @ordered
   */
  public static final int BUTTON_VALUE = 8;

  /**
   * An array of all the '<em><b>Inner Type Array</b></em>' enumerators.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private static final InnerTypeArray[] VALUES_ARRAY =
    new InnerTypeArray[]
    {
      DIV,
      PARA,
      INPUT,
      TABLE,
      TR,
      TD,
      IMG,
      FORM,
      BUTTON,
    };

  /**
   * A public read-only list of all the '<em><b>Inner Type Array</b></em>' enumerators.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static final List<InnerTypeArray> VALUES = Collections.unmodifiableList(Arrays.asList(VALUES_ARRAY));

  /**
   * Returns the '<em><b>Inner Type Array</b></em>' literal with the specified literal value.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param literal the literal.
   * @return the matching enumerator or <code>null</code>.
   * @generated
   */
  public static InnerTypeArray get(String literal)
  {
    for (int i = 0; i < VALUES_ARRAY.length; ++i)
    {
      InnerTypeArray result = VALUES_ARRAY[i];
      if (result.toString().equals(literal))
      {
        return result;
      }
    }
    return null;
  }

  /**
   * Returns the '<em><b>Inner Type Array</b></em>' literal with the specified name.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param name the name.
   * @return the matching enumerator or <code>null</code>.
   * @generated
   */
  public static InnerTypeArray getByName(String name)
  {
    for (int i = 0; i < VALUES_ARRAY.length; ++i)
    {
      InnerTypeArray result = VALUES_ARRAY[i];
      if (result.getName().equals(name))
      {
        return result;
      }
    }
    return null;
  }

  /**
   * Returns the '<em><b>Inner Type Array</b></em>' literal with the specified integer value.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param value the integer value.
   * @return the matching enumerator or <code>null</code>.
   * @generated
   */
  public static InnerTypeArray get(int value)
  {
    switch (value)
    {
      case DIV_VALUE: return DIV;
      case PARA_VALUE: return PARA;
      case INPUT_VALUE: return INPUT;
      case TABLE_VALUE: return TABLE;
      case TR_VALUE: return TR;
      case TD_VALUE: return TD;
      case IMG_VALUE: return IMG;
      case FORM_VALUE: return FORM;
      case BUTTON_VALUE: return BUTTON;
    }
    return null;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private final int value;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private final String name;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private final String literal;

  /**
   * Only this class can construct instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private InnerTypeArray(int value, String name, String literal)
  {
    this.value = value;
    this.name = name;
    this.literal = literal;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public int getValue()
  {
    return value;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getLiteral()
  {
    return literal;
  }

  /**
   * Returns the literal value of the enumerator, which is its string representation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    return literal;
  }
  
} //InnerTypeArray
