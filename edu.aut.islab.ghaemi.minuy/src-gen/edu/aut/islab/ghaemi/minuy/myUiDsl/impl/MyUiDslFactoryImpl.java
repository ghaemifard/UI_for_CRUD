/**
 * generated by Xtext 2.10.0
 */
package edu.aut.islab.ghaemi.minuy.myUiDsl.impl;

import edu.aut.islab.ghaemi.minuy.myUiDsl.*;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EDataType;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class MyUiDslFactoryImpl extends EFactoryImpl implements MyUiDslFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static MyUiDslFactory init()
  {
    try
    {
      MyUiDslFactory theMyUiDslFactory = (MyUiDslFactory)EPackage.Registry.INSTANCE.getEFactory(MyUiDslPackage.eNS_URI);
      if (theMyUiDslFactory != null)
      {
        return theMyUiDslFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new MyUiDslFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MyUiDslFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case MyUiDslPackage.MODEL: return createModel();
      case MyUiDslPackage.HEAD: return createHead();
      case MyUiDslPackage.BODY: return createBody();
      case MyUiDslPackage.NODE: return createNode();
      case MyUiDslPackage.SELF_REPEAT: return createSelfRepeat();
      case MyUiDslPackage.ACCESSORY: return createAccessory();
      case MyUiDslPackage.INNER_FEATURE: return createInnerFeature();
      case MyUiDslPackage.INNER_TEXT: return createInnerText();
      case MyUiDslPackage.INNER_STYLE: return createInnerStyle();
      case MyUiDslPackage.INNER_CLASS: return createInnerClass();
      case MyUiDslPackage.CLASS_NAME: return createClassName();
      case MyUiDslPackage.CLASS_NAME_SEC: return createClassNameSec();
      case MyUiDslPackage.INNER_TYPE: return createInnerType();
      case MyUiDslPackage.CSS_STYLES: return createCssStyles();
      case MyUiDslPackage.CSS_STYLE: return createCssStyle();
      case MyUiDslPackage.BORDER: return createBorder();
      case MyUiDslPackage.COLOR: return createColor();
      case MyUiDslPackage.BACK_COLOR: return createBackColor();
      case MyUiDslPackage.COLOR_DEF: return createcolorDef();
      case MyUiDslPackage.LITERAL_COLOR: return createLiteralColor();
      case MyUiDslPackage.RGBA_COLOR: return createRgbaColor();
      case MyUiDslPackage.RVAL: return createRval();
      case MyUiDslPackage.GVAL: return createGval();
      case MyUiDslPackage.BVAL: return createBval();
      case MyUiDslPackage.AVAL: return createAval();
      case MyUiDslPackage.BORDER_RAD: return createBorderRad();
      case MyUiDslPackage.POS: return createPos();
      case MyUiDslPackage.FLT: return createFlt();
      case MyUiDslPackage.CLR: return createClr();
      case MyUiDslPackage.DISP: return createDisp();
      case MyUiDslPackage.VER_AL: return createVerAl();
      case MyUiDslPackage.OFLOW: return createOFlow();
      case MyUiDslPackage.WID: return createWid();
      case MyUiDslPackage.H8: return createH8();
      case MyUiDslPackage.COORD: return createCoord();
      case MyUiDslPackage.MARG: return createMarg();
      case MyUiDslPackage.PADD: return createPadd();
      case MyUiDslPackage.MIN_MAX_VALUE: return createMinMaxValue();
      case MyUiDslPackage.MIN_VAL: return createMinVal();
      case MyUiDslPackage.MAX_VAL: return createMaxVal();
      case MyUiDslPackage.MID_VAL: return createMidVal();
      case MyUiDslPackage.FOUR_ASPECT: return createFourAspect();
      case MyUiDslPackage.LEFT_ASPECT: return createLeftAspect();
      case MyUiDslPackage.RIGHT_ASPECT: return createRightAspect();
      case MyUiDslPackage.UP_ASPECT: return createUpAspect();
      case MyUiDslPackage.DOWN_ASPECT: return createDownAspect();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object createFromString(EDataType eDataType, String initialValue)
  {
    switch (eDataType.getClassifierID())
    {
      case MyUiDslPackage.POS_VALS:
        return createPosValsFromString(eDataType, initialValue);
      case MyUiDslPackage.FLT_VALS:
        return createFltValsFromString(eDataType, initialValue);
      case MyUiDslPackage.CLR_VALS:
        return createClrValsFromString(eDataType, initialValue);
      case MyUiDslPackage.DISP_VALS:
        return createDispValsFromString(eDataType, initialValue);
      case MyUiDslPackage.VERAL_VALS:
        return createVeralValsFromString(eDataType, initialValue);
      case MyUiDslPackage.OFLOW_VALS:
        return createOFlowValsFromString(eDataType, initialValue);
      case MyUiDslPackage.INNER_TYPE_ARRAY:
        return createInnerTypeArrayFromString(eDataType, initialValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String convertToString(EDataType eDataType, Object instanceValue)
  {
    switch (eDataType.getClassifierID())
    {
      case MyUiDslPackage.POS_VALS:
        return convertPosValsToString(eDataType, instanceValue);
      case MyUiDslPackage.FLT_VALS:
        return convertFltValsToString(eDataType, instanceValue);
      case MyUiDslPackage.CLR_VALS:
        return convertClrValsToString(eDataType, instanceValue);
      case MyUiDslPackage.DISP_VALS:
        return convertDispValsToString(eDataType, instanceValue);
      case MyUiDslPackage.VERAL_VALS:
        return convertVeralValsToString(eDataType, instanceValue);
      case MyUiDslPackage.OFLOW_VALS:
        return convertOFlowValsToString(eDataType, instanceValue);
      case MyUiDslPackage.INNER_TYPE_ARRAY:
        return convertInnerTypeArrayToString(eDataType, instanceValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Model createModel()
  {
    ModelImpl model = new ModelImpl();
    return model;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Head createHead()
  {
    HeadImpl head = new HeadImpl();
    return head;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Body createBody()
  {
    BodyImpl body = new BodyImpl();
    return body;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Node createNode()
  {
    NodeImpl node = new NodeImpl();
    return node;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SelfRepeat createSelfRepeat()
  {
    SelfRepeatImpl selfRepeat = new SelfRepeatImpl();
    return selfRepeat;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Accessory createAccessory()
  {
    AccessoryImpl accessory = new AccessoryImpl();
    return accessory;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public InnerFeature createInnerFeature()
  {
    InnerFeatureImpl innerFeature = new InnerFeatureImpl();
    return innerFeature;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public InnerText createInnerText()
  {
    InnerTextImpl innerText = new InnerTextImpl();
    return innerText;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public InnerStyle createInnerStyle()
  {
    InnerStyleImpl innerStyle = new InnerStyleImpl();
    return innerStyle;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public InnerClass createInnerClass()
  {
    InnerClassImpl innerClass = new InnerClassImpl();
    return innerClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ClassName createClassName()
  {
    ClassNameImpl className = new ClassNameImpl();
    return className;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ClassNameSec createClassNameSec()
  {
    ClassNameSecImpl classNameSec = new ClassNameSecImpl();
    return classNameSec;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public InnerType createInnerType()
  {
    InnerTypeImpl innerType = new InnerTypeImpl();
    return innerType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public CssStyles createCssStyles()
  {
    CssStylesImpl cssStyles = new CssStylesImpl();
    return cssStyles;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public CssStyle createCssStyle()
  {
    CssStyleImpl cssStyle = new CssStyleImpl();
    return cssStyle;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Border createBorder()
  {
    BorderImpl border = new BorderImpl();
    return border;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Color createColor()
  {
    ColorImpl color = new ColorImpl();
    return color;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public BackColor createBackColor()
  {
    BackColorImpl backColor = new BackColorImpl();
    return backColor;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public colorDef createcolorDef()
  {
    colorDefImpl colorDef = new colorDefImpl();
    return colorDef;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public LiteralColor createLiteralColor()
  {
    LiteralColorImpl literalColor = new LiteralColorImpl();
    return literalColor;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public RgbaColor createRgbaColor()
  {
    RgbaColorImpl rgbaColor = new RgbaColorImpl();
    return rgbaColor;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Rval createRval()
  {
    RvalImpl rval = new RvalImpl();
    return rval;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Gval createGval()
  {
    GvalImpl gval = new GvalImpl();
    return gval;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Bval createBval()
  {
    BvalImpl bval = new BvalImpl();
    return bval;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Aval createAval()
  {
    AvalImpl aval = new AvalImpl();
    return aval;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public BorderRad createBorderRad()
  {
    BorderRadImpl borderRad = new BorderRadImpl();
    return borderRad;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Pos createPos()
  {
    PosImpl pos = new PosImpl();
    return pos;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Flt createFlt()
  {
    FltImpl flt = new FltImpl();
    return flt;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Clr createClr()
  {
    ClrImpl clr = new ClrImpl();
    return clr;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Disp createDisp()
  {
    DispImpl disp = new DispImpl();
    return disp;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public VerAl createVerAl()
  {
    VerAlImpl verAl = new VerAlImpl();
    return verAl;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public OFlow createOFlow()
  {
    OFlowImpl oFlow = new OFlowImpl();
    return oFlow;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Wid createWid()
  {
    WidImpl wid = new WidImpl();
    return wid;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public H8 createH8()
  {
    H8Impl h8 = new H8Impl();
    return h8;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Coord createCoord()
  {
    CoordImpl coord = new CoordImpl();
    return coord;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Marg createMarg()
  {
    MargImpl marg = new MargImpl();
    return marg;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Padd createPadd()
  {
    PaddImpl padd = new PaddImpl();
    return padd;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MinMaxValue createMinMaxValue()
  {
    MinMaxValueImpl minMaxValue = new MinMaxValueImpl();
    return minMaxValue;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MinVal createMinVal()
  {
    MinValImpl minVal = new MinValImpl();
    return minVal;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MaxVal createMaxVal()
  {
    MaxValImpl maxVal = new MaxValImpl();
    return maxVal;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MidVal createMidVal()
  {
    MidValImpl midVal = new MidValImpl();
    return midVal;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public FourAspect createFourAspect()
  {
    FourAspectImpl fourAspect = new FourAspectImpl();
    return fourAspect;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public LeftAspect createLeftAspect()
  {
    LeftAspectImpl leftAspect = new LeftAspectImpl();
    return leftAspect;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public RightAspect createRightAspect()
  {
    RightAspectImpl rightAspect = new RightAspectImpl();
    return rightAspect;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public UpAspect createUpAspect()
  {
    UpAspectImpl upAspect = new UpAspectImpl();
    return upAspect;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DownAspect createDownAspect()
  {
    DownAspectImpl downAspect = new DownAspectImpl();
    return downAspect;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public PosVals createPosValsFromString(EDataType eDataType, String initialValue)
  {
    PosVals result = PosVals.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertPosValsToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public FltVals createFltValsFromString(EDataType eDataType, String initialValue)
  {
    FltVals result = FltVals.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertFltValsToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ClrVals createClrValsFromString(EDataType eDataType, String initialValue)
  {
    ClrVals result = ClrVals.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertClrValsToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DispVals createDispValsFromString(EDataType eDataType, String initialValue)
  {
    DispVals result = DispVals.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertDispValsToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public VeralVals createVeralValsFromString(EDataType eDataType, String initialValue)
  {
    VeralVals result = VeralVals.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertVeralValsToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public OFlowVals createOFlowValsFromString(EDataType eDataType, String initialValue)
  {
    OFlowVals result = OFlowVals.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertOFlowValsToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public InnerTypeArray createInnerTypeArrayFromString(EDataType eDataType, String initialValue)
  {
    InnerTypeArray result = InnerTypeArray.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertInnerTypeArrayToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MyUiDslPackage getMyUiDslPackage()
  {
    return (MyUiDslPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static MyUiDslPackage getPackage()
  {
    return MyUiDslPackage.eINSTANCE;
  }

} //MyUiDslFactoryImpl
