/*
 * generated by Xtext 2.10.0
 */
package edu.aut.islab.ghaemi.minuy.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.UnorderedGroup;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractEnumRuleElementFinder;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class MyUiDslGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.aut.islab.ghaemi.minuy.MyUiDsl.Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cHeadsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cHeadsHeadParserRuleCall_0_0 = (RuleCall)cHeadsAssignment_0.eContents().get(0);
		private final Keyword cVerticalLineKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cBodisAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cBodisBodyParserRuleCall_2_0 = (RuleCall)cBodisAssignment_2.eContents().get(0);
		private final Keyword cVerticalLineKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cAccessoriesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cAccessoriesAccessoryParserRuleCall_4_0 = (RuleCall)cAccessoriesAssignment_4.eContents().get(0);
		
		//Model:
		//	heads+=Head* '|' bodis+=Body+ '|' accessories+=Accessory*;
		@Override public ParserRule getRule() { return rule; }
		
		//heads+=Head* '|' bodis+=Body+ '|' accessories+=Accessory*
		public Group getGroup() { return cGroup; }
		
		//heads+=Head*
		public Assignment getHeadsAssignment_0() { return cHeadsAssignment_0; }
		
		//Head
		public RuleCall getHeadsHeadParserRuleCall_0_0() { return cHeadsHeadParserRuleCall_0_0; }
		
		//'|'
		public Keyword getVerticalLineKeyword_1() { return cVerticalLineKeyword_1; }
		
		//bodis+=Body+
		public Assignment getBodisAssignment_2() { return cBodisAssignment_2; }
		
		//Body
		public RuleCall getBodisBodyParserRuleCall_2_0() { return cBodisBodyParserRuleCall_2_0; }
		
		//'|'
		public Keyword getVerticalLineKeyword_3() { return cVerticalLineKeyword_3; }
		
		//accessories+=Accessory*
		public Assignment getAccessoriesAssignment_4() { return cAccessoriesAssignment_4; }
		
		//Accessory
		public RuleCall getAccessoriesAccessoryParserRuleCall_4_0() { return cAccessoriesAccessoryParserRuleCall_4_0; }
	}
	public class HeadElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.aut.islab.ghaemi.minuy.MyUiDsl.Head");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cFileNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFileNameIDTerminalRuleCall_1_0 = (RuleCall)cFileNameAssignment_1.eContents().get(0);
		private final Keyword cAsKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cHeadTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cHeadTypeHeadTypeParserRuleCall_3_0 = (RuleCall)cHeadTypeAssignment_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Head:
		//	'import' fileName=ID 'as' headType=HeadType ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'import' fileName=ID 'as' headType=HeadType ';'
		public Group getGroup() { return cGroup; }
		
		//'import'
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }
		
		//fileName=ID
		public Assignment getFileNameAssignment_1() { return cFileNameAssignment_1; }
		
		//ID
		public RuleCall getFileNameIDTerminalRuleCall_1_0() { return cFileNameIDTerminalRuleCall_1_0; }
		
		//'as'
		public Keyword getAsKeyword_2() { return cAsKeyword_2; }
		
		//headType=HeadType
		public Assignment getHeadTypeAssignment_3() { return cHeadTypeAssignment_3; }
		
		//HeadType
		public RuleCall getHeadTypeHeadTypeParserRuleCall_3_0() { return cHeadTypeHeadTypeParserRuleCall_3_0; }
		
		//';'
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}
	public class HeadTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.aut.islab.ghaemi.minuy.MyUiDsl.HeadType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword c_CSSKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword c_JSKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final RuleCall cOneCharTerminalRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//HeadType:
		//	'_CSS' | '_JS' | OneChar;
		@Override public ParserRule getRule() { return rule; }
		
		//'_CSS' | '_JS' | OneChar
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'_CSS'
		public Keyword get_CSSKeyword_0() { return c_CSSKeyword_0; }
		
		//'_JS'
		public Keyword get_JSKeyword_1() { return c_JSKeyword_1; }
		
		//OneChar
		public RuleCall getOneCharTerminalRuleCall_2() { return cOneCharTerminalRuleCall_2; }
	}
	public class BodyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.aut.islab.ghaemi.minuy.MyUiDsl.Body");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameNodeParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cRightAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRightNodeParserRuleCall_2_0 = (RuleCall)cRightAssignment_2.eContents().get(0);
		private final Assignment cSelfRepeatAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cSelfRepeatSelfRepeatParserRuleCall_3_0 = (RuleCall)cSelfRepeatAssignment_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Body:
		//	name=Node '->' right+=Node+ selfRepeat=SelfRepeat? ';';
		@Override public ParserRule getRule() { return rule; }
		
		//name=Node '->' right+=Node+ selfRepeat=SelfRepeat? ';'
		public Group getGroup() { return cGroup; }
		
		//name=Node
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//Node
		public RuleCall getNameNodeParserRuleCall_0_0() { return cNameNodeParserRuleCall_0_0; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_1() { return cHyphenMinusGreaterThanSignKeyword_1; }
		
		//right+=Node+
		public Assignment getRightAssignment_2() { return cRightAssignment_2; }
		
		//Node
		public RuleCall getRightNodeParserRuleCall_2_0() { return cRightNodeParserRuleCall_2_0; }
		
		//selfRepeat=SelfRepeat?
		public Assignment getSelfRepeatAssignment_3() { return cSelfRepeatAssignment_3; }
		
		//SelfRepeat
		public RuleCall getSelfRepeatSelfRepeatParserRuleCall_3_0() { return cSelfRepeatSelfRepeatParserRuleCall_3_0; }
		
		//';'
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}
	public class NodeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.aut.islab.ghaemi.minuy.MyUiDsl.Node");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameOneCharTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//Node:
		//	name=OneChar;
		@Override public ParserRule getRule() { return rule; }
		
		//name=OneChar
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//OneChar
		public RuleCall getNameOneCharTerminalRuleCall_0() { return cNameOneCharTerminalRuleCall_0; }
	}
	public class SelfRepeatElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.aut.islab.ghaemi.minuy.MyUiDsl.SelfRepeat");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNumberAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNumberINTTerminalRuleCall_0_0 = (RuleCall)cNumberAssignment_0.eContents().get(0);
		private final Assignment cVerticalAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cVerticalAsteriskKeyword_1_0 = (Keyword)cVerticalAssignment_1.eContents().get(0);
		
		//SelfRepeat:
		//	number=INT vertical?='*'?;
		@Override public ParserRule getRule() { return rule; }
		
		//number=INT vertical?='*'?
		public Group getGroup() { return cGroup; }
		
		//number=INT
		public Assignment getNumberAssignment_0() { return cNumberAssignment_0; }
		
		//INT
		public RuleCall getNumberINTTerminalRuleCall_0_0() { return cNumberINTTerminalRuleCall_0_0; }
		
		//vertical?='*'?
		public Assignment getVerticalAssignment_1() { return cVerticalAssignment_1; }
		
		//'*'
		public Keyword getVerticalAsteriskKeyword_1_0() { return cVerticalAsteriskKeyword_1_0; }
	}
	public class AccessoryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.aut.islab.ghaemi.minuy.MyUiDsl.Accessory");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLeftAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLeftNodeParserRuleCall_0_0 = (RuleCall)cLeftAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final UnorderedGroup cUnorderedGroup_2 = (UnorderedGroup)cGroup.eContents().get(2);
		private final Assignment cTextAssignment_2_0 = (Assignment)cUnorderedGroup_2.eContents().get(0);
		private final RuleCall cTextInnerTextParserRuleCall_2_0_0 = (RuleCall)cTextAssignment_2_0.eContents().get(0);
		private final Assignment cStyleAssignment_2_1 = (Assignment)cUnorderedGroup_2.eContents().get(1);
		private final RuleCall cStyleInnerStyleParserRuleCall_2_1_0 = (RuleCall)cStyleAssignment_2_1.eContents().get(0);
		private final Assignment cClazzAssignment_2_2 = (Assignment)cUnorderedGroup_2.eContents().get(2);
		private final RuleCall cClazzInnerClassParserRuleCall_2_2_0 = (RuleCall)cClazzAssignment_2_2.eContents().get(0);
		private final Assignment cTypeAssignment_2_3 = (Assignment)cUnorderedGroup_2.eContents().get(3);
		private final RuleCall cTypeInnerTypeParserRuleCall_2_3_0 = (RuleCall)cTypeAssignment_2_3.eContents().get(0);
		private final Assignment cFeatureAssignment_2_4 = (Assignment)cUnorderedGroup_2.eContents().get(4);
		private final RuleCall cFeatureInnerFeatureParserRuleCall_2_4_0 = (RuleCall)cFeatureAssignment_2_4.eContents().get(0);
		
		//Accessory:
		//	left=Node ':' (text=InnerText? & style=InnerStyle? & clazz=InnerClass? & type=InnerType? & feature=InnerFeature?);
		@Override public ParserRule getRule() { return rule; }
		
		//left=Node ':' (text=InnerText? & style=InnerStyle? & clazz=InnerClass? & type=InnerType? & feature=InnerFeature?)
		public Group getGroup() { return cGroup; }
		
		//left=Node
		public Assignment getLeftAssignment_0() { return cLeftAssignment_0; }
		
		//Node
		public RuleCall getLeftNodeParserRuleCall_0_0() { return cLeftNodeParserRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//(text=InnerText? & style=InnerStyle? & clazz=InnerClass? & type=InnerType? & feature=InnerFeature?)
		public UnorderedGroup getUnorderedGroup_2() { return cUnorderedGroup_2; }
		
		//text=InnerText?
		public Assignment getTextAssignment_2_0() { return cTextAssignment_2_0; }
		
		//InnerText
		public RuleCall getTextInnerTextParserRuleCall_2_0_0() { return cTextInnerTextParserRuleCall_2_0_0; }
		
		//style=InnerStyle?
		public Assignment getStyleAssignment_2_1() { return cStyleAssignment_2_1; }
		
		//InnerStyle
		public RuleCall getStyleInnerStyleParserRuleCall_2_1_0() { return cStyleInnerStyleParserRuleCall_2_1_0; }
		
		//clazz=InnerClass?
		public Assignment getClazzAssignment_2_2() { return cClazzAssignment_2_2; }
		
		//InnerClass
		public RuleCall getClazzInnerClassParserRuleCall_2_2_0() { return cClazzInnerClassParserRuleCall_2_2_0; }
		
		//type=InnerType?
		public Assignment getTypeAssignment_2_3() { return cTypeAssignment_2_3; }
		
		//InnerType
		public RuleCall getTypeInnerTypeParserRuleCall_2_3_0() { return cTypeInnerTypeParserRuleCall_2_3_0; }
		
		//feature=InnerFeature?
		public Assignment getFeatureAssignment_2_4() { return cFeatureAssignment_2_4; }
		
		//InnerFeature
		public RuleCall getFeatureInnerFeatureParserRuleCall_2_4_0() { return cFeatureInnerFeatureParserRuleCall_2_4_0; }
	}
	public class InnerFeatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.aut.islab.ghaemi.minuy.MyUiDsl.InnerFeature");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cInnerFeatureAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueSTRING2TerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//InnerFeature:
		//	{InnerFeature} value=STRING2;
		@Override public ParserRule getRule() { return rule; }
		
		//{InnerFeature} value=STRING2
		public Group getGroup() { return cGroup; }
		
		//{InnerFeature}
		public Action getInnerFeatureAction_0() { return cInnerFeatureAction_0; }
		
		//value=STRING2
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//STRING2
		public RuleCall getValueSTRING2TerminalRuleCall_1_0() { return cValueSTRING2TerminalRuleCall_1_0; }
	}
	public class InnerTextElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.aut.islab.ghaemi.minuy.MyUiDsl.InnerText");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLessThanSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueIDTerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//InnerText:
		//	'<' value=ID '>';
		@Override public ParserRule getRule() { return rule; }
		
		//'<' value=ID '>'
		public Group getGroup() { return cGroup; }
		
		//'<'
		public Keyword getLessThanSignKeyword_0() { return cLessThanSignKeyword_0; }
		
		//value=ID
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//ID
		public RuleCall getValueIDTerminalRuleCall_1_0() { return cValueIDTerminalRuleCall_1_0; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_2() { return cGreaterThanSignKeyword_2; }
	}
	public class InnerStyleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.aut.islab.ghaemi.minuy.MyUiDsl.InnerStyle");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Action cInnerStyleAction_1 = (Action)cGroup.eContents().get(1);
		private final Assignment cStylesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStylesCssStyleParserRuleCall_2_0 = (RuleCall)cStylesAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//InnerStyle:
		//	'(' {InnerStyle} styles+=CssStyle* ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'(' {InnerStyle} styles+=CssStyle* ')'
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//{InnerStyle}
		public Action getInnerStyleAction_1() { return cInnerStyleAction_1; }
		
		//styles+=CssStyle*
		public Assignment getStylesAssignment_2() { return cStylesAssignment_2; }
		
		//CssStyle
		public RuleCall getStylesCssStyleParserRuleCall_2_0() { return cStylesCssStyleParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class InnerClassElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.aut.islab.ghaemi.minuy.MyUiDsl.InnerClass");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cClazzesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cClazzesClassNameParserRuleCall_1_0 = (RuleCall)cClazzesAssignment_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//InnerClass:
		//	'[' clazzes=ClassName ']';
		@Override public ParserRule getRule() { return rule; }
		
		//'[' clazzes=ClassName ']'
		public Group getGroup() { return cGroup; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }
		
		//clazzes=ClassName
		public Assignment getClazzesAssignment_1() { return cClazzesAssignment_1; }
		
		//ClassName
		public RuleCall getClazzesClassNameParserRuleCall_1_0() { return cClazzesClassNameParserRuleCall_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_2() { return cRightSquareBracketKeyword_2; }
	}
	public class ClassNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.aut.islab.ghaemi.minuy.MyUiDsl.ClassName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTheIdAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTheIdIDTerminalRuleCall_0_0 = (RuleCall)cTheIdAssignment_0.eContents().get(0);
		private final Assignment cClazzAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cClazzClassNameSecParserRuleCall_1_0 = (RuleCall)cClazzAssignment_1.eContents().get(0);
		
		//ClassName:
		//	theId=ID? clazz+=ClassNameSec*;
		@Override public ParserRule getRule() { return rule; }
		
		//theId=ID? clazz+=ClassNameSec*
		public Group getGroup() { return cGroup; }
		
		//theId=ID?
		public Assignment getTheIdAssignment_0() { return cTheIdAssignment_0; }
		
		//ID
		public RuleCall getTheIdIDTerminalRuleCall_0_0() { return cTheIdIDTerminalRuleCall_0_0; }
		
		//clazz+=ClassNameSec*
		public Assignment getClazzAssignment_1() { return cClazzAssignment_1; }
		
		//ClassNameSec
		public RuleCall getClazzClassNameSecParserRuleCall_1_0() { return cClazzClassNameSecParserRuleCall_1_0; }
	}
	public class ClassNameSecElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.aut.islab.ghaemi.minuy.MyUiDsl.ClassNameSec");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCommaKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cCfClazzAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCfClazzIDTerminalRuleCall_1_0 = (RuleCall)cCfClazzAssignment_1.eContents().get(0);
		
		//ClassNameSec:
		//	',' cfClazz=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//',' cfClazz=ID
		public Group getGroup() { return cGroup; }
		
		//','
		public Keyword getCommaKeyword_0() { return cCommaKeyword_0; }
		
		//cfClazz=ID
		public Assignment getCfClazzAssignment_1() { return cCfClazzAssignment_1; }
		
		//ID
		public RuleCall getCfClazzIDTerminalRuleCall_1_0() { return cCfClazzIDTerminalRuleCall_1_0; }
	}
	public class InnerTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.aut.islab.ghaemi.minuy.MyUiDsl.InnerType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueInnerTypeArrayEnumRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//InnerType:
		//	'{' value=InnerTypeArray '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'{' value=InnerTypeArray '}'
		public Group getGroup() { return cGroup; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }
		
		//value=InnerTypeArray
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//InnerTypeArray
		public RuleCall getValueInnerTypeArrayEnumRuleCall_1_0() { return cValueInnerTypeArrayEnumRuleCall_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_2() { return cRightCurlyBracketKeyword_2; }
	}
	public class CssStylesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.aut.islab.ghaemi.minuy.MyUiDsl.CssStyles");
		private final Assignment cStylesAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cStylesCssStyleParserRuleCall_0 = (RuleCall)cStylesAssignment.eContents().get(0);
		
		//CssStyles:
		//	styles=CssStyle;
		@Override public ParserRule getRule() { return rule; }
		
		//styles=CssStyle
		public Assignment getStylesAssignment() { return cStylesAssignment; }
		
		//CssStyle
		public RuleCall getStylesCssStyleParserRuleCall_0() { return cStylesCssStyleParserRuleCall_0; }
	}
	public class CssStyleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.aut.islab.ghaemi.minuy.MyUiDsl.CssStyle");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final RuleCall cPosParserRuleCall_0_0 = (RuleCall)cAlternatives_0.eContents().get(0);
		private final RuleCall cFltParserRuleCall_0_1 = (RuleCall)cAlternatives_0.eContents().get(1);
		private final RuleCall cClrParserRuleCall_0_2 = (RuleCall)cAlternatives_0.eContents().get(2);
		private final RuleCall cDispParserRuleCall_0_3 = (RuleCall)cAlternatives_0.eContents().get(3);
		private final RuleCall cVerAlParserRuleCall_0_4 = (RuleCall)cAlternatives_0.eContents().get(4);
		private final RuleCall cWidParserRuleCall_0_5 = (RuleCall)cAlternatives_0.eContents().get(5);
		private final RuleCall cH8ParserRuleCall_0_6 = (RuleCall)cAlternatives_0.eContents().get(6);
		private final RuleCall cCoordParserRuleCall_0_7 = (RuleCall)cAlternatives_0.eContents().get(7);
		private final RuleCall cOFlowParserRuleCall_0_8 = (RuleCall)cAlternatives_0.eContents().get(8);
		private final RuleCall cMargParserRuleCall_0_9 = (RuleCall)cAlternatives_0.eContents().get(9);
		private final RuleCall cPaddParserRuleCall_0_10 = (RuleCall)cAlternatives_0.eContents().get(10);
		private final RuleCall cBorderParserRuleCall_0_11 = (RuleCall)cAlternatives_0.eContents().get(11);
		private final RuleCall cBorderRadParserRuleCall_0_12 = (RuleCall)cAlternatives_0.eContents().get(12);
		private final RuleCall cColorParserRuleCall_0_13 = (RuleCall)cAlternatives_0.eContents().get(13);
		private final RuleCall cBackColorParserRuleCall_0_14 = (RuleCall)cAlternatives_0.eContents().get(14);
		private final Keyword cSemicolonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//CssStyle:
		//	(Pos | Flt | Clr | Disp | VerAl | Wid | H8 | Coord | OFlow | Marg | Padd | Border | BorderRad | Color | BackColor)
		//	';';
		@Override public ParserRule getRule() { return rule; }
		
		//(Pos | Flt | Clr | Disp | VerAl | Wid | H8 | Coord | OFlow | Marg | Padd | Border | BorderRad | Color | BackColor) ';'
		public Group getGroup() { return cGroup; }
		
		//(Pos | Flt | Clr | Disp | VerAl | Wid | H8 | Coord | OFlow | Marg | Padd | Border | BorderRad | Color | BackColor)
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//Pos
		public RuleCall getPosParserRuleCall_0_0() { return cPosParserRuleCall_0_0; }
		
		//Flt
		public RuleCall getFltParserRuleCall_0_1() { return cFltParserRuleCall_0_1; }
		
		//Clr
		public RuleCall getClrParserRuleCall_0_2() { return cClrParserRuleCall_0_2; }
		
		//Disp
		public RuleCall getDispParserRuleCall_0_3() { return cDispParserRuleCall_0_3; }
		
		//VerAl
		public RuleCall getVerAlParserRuleCall_0_4() { return cVerAlParserRuleCall_0_4; }
		
		//Wid
		public RuleCall getWidParserRuleCall_0_5() { return cWidParserRuleCall_0_5; }
		
		//H8
		public RuleCall getH8ParserRuleCall_0_6() { return cH8ParserRuleCall_0_6; }
		
		//Coord
		public RuleCall getCoordParserRuleCall_0_7() { return cCoordParserRuleCall_0_7; }
		
		//OFlow
		public RuleCall getOFlowParserRuleCall_0_8() { return cOFlowParserRuleCall_0_8; }
		
		//Marg
		public RuleCall getMargParserRuleCall_0_9() { return cMargParserRuleCall_0_9; }
		
		//Padd
		public RuleCall getPaddParserRuleCall_0_10() { return cPaddParserRuleCall_0_10; }
		
		//Border
		public RuleCall getBorderParserRuleCall_0_11() { return cBorderParserRuleCall_0_11; }
		
		//BorderRad
		public RuleCall getBorderRadParserRuleCall_0_12() { return cBorderRadParserRuleCall_0_12; }
		
		//Color
		public RuleCall getColorParserRuleCall_0_13() { return cColorParserRuleCall_0_13; }
		
		//BackColor
		public RuleCall getBackColorParserRuleCall_0_14() { return cBackColorParserRuleCall_0_14; }
		
		//';'
		public Keyword getSemicolonKeyword_1() { return cSemicolonKeyword_1; }
	}
	public class BorderElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.aut.islab.ghaemi.minuy.MyUiDsl.Border");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBorderKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueColorDefParserRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//Border:
		//	'border:' value=colorDef;
		@Override public ParserRule getRule() { return rule; }
		
		//'border:' value=colorDef
		public Group getGroup() { return cGroup; }
		
		//'border:'
		public Keyword getBorderKeyword_0() { return cBorderKeyword_0; }
		
		//value=colorDef
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//colorDef
		public RuleCall getValueColorDefParserRuleCall_1_0() { return cValueColorDefParserRuleCall_1_0; }
	}
	public class ColorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.aut.islab.ghaemi.minuy.MyUiDsl.Color");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cColorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueColorDefParserRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//Color:
		//	'color:' value=colorDef;
		@Override public ParserRule getRule() { return rule; }
		
		//'color:' value=colorDef
		public Group getGroup() { return cGroup; }
		
		//'color:'
		public Keyword getColorKeyword_0() { return cColorKeyword_0; }
		
		//value=colorDef
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//colorDef
		public RuleCall getValueColorDefParserRuleCall_1_0() { return cValueColorDefParserRuleCall_1_0; }
	}
	public class BackColorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.aut.islab.ghaemi.minuy.MyUiDsl.BackColor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBcolorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueColorDefParserRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//BackColor:
		//	'bcolor:' value=colorDef;
		@Override public ParserRule getRule() { return rule; }
		
		//'bcolor:' value=colorDef
		public Group getGroup() { return cGroup; }
		
		//'bcolor:'
		public Keyword getBcolorKeyword_0() { return cBcolorKeyword_0; }
		
		//value=colorDef
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//colorDef
		public RuleCall getValueColorDefParserRuleCall_1_0() { return cValueColorDefParserRuleCall_1_0; }
	}
	public class ColorDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.aut.islab.ghaemi.minuy.MyUiDsl.colorDef");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLiteralColorParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cRgbaColorParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//colorDef:
		//	LiteralColor | RgbaColor;
		@Override public ParserRule getRule() { return rule; }
		
		//LiteralColor | RgbaColor
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//LiteralColor
		public RuleCall getLiteralColorParserRuleCall_0() { return cLiteralColorParserRuleCall_0; }
		
		//RgbaColor
		public RuleCall getRgbaColorParserRuleCall_1() { return cRgbaColorParserRuleCall_1; }
	}
	public class LiteralColorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.aut.islab.ghaemi.minuy.MyUiDsl.LiteralColor");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cValueAlternatives_0 = (Alternatives)cValueAssignment.eContents().get(0);
		private final Keyword cValueRedKeyword_0_0 = (Keyword)cValueAlternatives_0.eContents().get(0);
		private final Keyword cValueBlueKeyword_0_1 = (Keyword)cValueAlternatives_0.eContents().get(1);
		private final Keyword cValueBlackKeyword_0_2 = (Keyword)cValueAlternatives_0.eContents().get(2);
		private final Keyword cValueGreenKeyword_0_3 = (Keyword)cValueAlternatives_0.eContents().get(3);
		private final Keyword cValueYellowKeyword_0_4 = (Keyword)cValueAlternatives_0.eContents().get(4);
		private final Keyword cValuePinkKeyword_0_5 = (Keyword)cValueAlternatives_0.eContents().get(5);
		private final Keyword cValueBrownKeyword_0_6 = (Keyword)cValueAlternatives_0.eContents().get(6);
		private final Keyword cValueGoldKeyword_0_7 = (Keyword)cValueAlternatives_0.eContents().get(7);
		private final Keyword cValueWhiteKeyword_0_8 = (Keyword)cValueAlternatives_0.eContents().get(8);
		private final Keyword cValueGreyKeyword_0_9 = (Keyword)cValueAlternatives_0.eContents().get(9);
		
		//LiteralColor:
		//	value=("Red" | "Blue" | "Black" | "Green" | "Yellow" | "Pink" | "Brown" | "Gold" | "White" | "Grey");
		@Override public ParserRule getRule() { return rule; }
		
		//value=("Red" | "Blue" | "Black" | "Green" | "Yellow" | "Pink" | "Brown" | "Gold" | "White" | "Grey")
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//("Red" | "Blue" | "Black" | "Green" | "Yellow" | "Pink" | "Brown" | "Gold" | "White" | "Grey")
		public Alternatives getValueAlternatives_0() { return cValueAlternatives_0; }
		
		//"Red"
		public Keyword getValueRedKeyword_0_0() { return cValueRedKeyword_0_0; }
		
		//"Blue"
		public Keyword getValueBlueKeyword_0_1() { return cValueBlueKeyword_0_1; }
		
		//"Black"
		public Keyword getValueBlackKeyword_0_2() { return cValueBlackKeyword_0_2; }
		
		//"Green"
		public Keyword getValueGreenKeyword_0_3() { return cValueGreenKeyword_0_3; }
		
		//"Yellow"
		public Keyword getValueYellowKeyword_0_4() { return cValueYellowKeyword_0_4; }
		
		//"Pink"
		public Keyword getValuePinkKeyword_0_5() { return cValuePinkKeyword_0_5; }
		
		//"Brown"
		public Keyword getValueBrownKeyword_0_6() { return cValueBrownKeyword_0_6; }
		
		//"Gold"
		public Keyword getValueGoldKeyword_0_7() { return cValueGoldKeyword_0_7; }
		
		//"White"
		public Keyword getValueWhiteKeyword_0_8() { return cValueWhiteKeyword_0_8; }
		
		//"Grey"
		public Keyword getValueGreyKeyword_0_9() { return cValueGreyKeyword_0_9; }
	}
	public class RgbaColorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.aut.islab.ghaemi.minuy.MyUiDsl.RgbaColor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRgbaKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final UnorderedGroup cUnorderedGroup_1 = (UnorderedGroup)cGroup.eContents().get(1);
		private final Assignment cRvalAssignment_1_0 = (Assignment)cUnorderedGroup_1.eContents().get(0);
		private final RuleCall cRvalRvalParserRuleCall_1_0_0 = (RuleCall)cRvalAssignment_1_0.eContents().get(0);
		private final Assignment cGvalAssignment_1_1 = (Assignment)cUnorderedGroup_1.eContents().get(1);
		private final RuleCall cGvalGvalParserRuleCall_1_1_0 = (RuleCall)cGvalAssignment_1_1.eContents().get(0);
		private final Assignment cBvalAssignment_1_2 = (Assignment)cUnorderedGroup_1.eContents().get(2);
		private final RuleCall cBvalBvalParserRuleCall_1_2_0 = (RuleCall)cBvalAssignment_1_2.eContents().get(0);
		private final Assignment cAvalAssignment_1_3 = (Assignment)cUnorderedGroup_1.eContents().get(3);
		private final RuleCall cAvalAvalParserRuleCall_1_3_0 = (RuleCall)cAvalAssignment_1_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//RgbaColor:
		//	'rgba(' (rval=Rval? & gval=Gval? & bval=Bval? & aval=Aval?) ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'rgba(' (rval=Rval? & gval=Gval? & bval=Bval? & aval=Aval?) ')'
		public Group getGroup() { return cGroup; }
		
		//'rgba('
		public Keyword getRgbaKeyword_0() { return cRgbaKeyword_0; }
		
		//(rval=Rval? & gval=Gval? & bval=Bval? & aval=Aval?)
		public UnorderedGroup getUnorderedGroup_1() { return cUnorderedGroup_1; }
		
		//rval=Rval?
		public Assignment getRvalAssignment_1_0() { return cRvalAssignment_1_0; }
		
		//Rval
		public RuleCall getRvalRvalParserRuleCall_1_0_0() { return cRvalRvalParserRuleCall_1_0_0; }
		
		//gval=Gval?
		public Assignment getGvalAssignment_1_1() { return cGvalAssignment_1_1; }
		
		//Gval
		public RuleCall getGvalGvalParserRuleCall_1_1_0() { return cGvalGvalParserRuleCall_1_1_0; }
		
		//bval=Bval?
		public Assignment getBvalAssignment_1_2() { return cBvalAssignment_1_2; }
		
		//Bval
		public RuleCall getBvalBvalParserRuleCall_1_2_0() { return cBvalBvalParserRuleCall_1_2_0; }
		
		//aval=Aval?
		public Assignment getAvalAssignment_1_3() { return cAvalAssignment_1_3; }
		
		//Aval
		public RuleCall getAvalAvalParserRuleCall_1_3_0() { return cAvalAvalParserRuleCall_1_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}
	public class RvalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.aut.islab.ghaemi.minuy.MyUiDsl.Rval");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cValueAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cValueINTTerminalRuleCall_0_0 = (RuleCall)cValueAssignment_0.eContents().get(0);
		private final Keyword cRedKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Rval:
		//	value=INT 'red';
		@Override public ParserRule getRule() { return rule; }
		
		//value=INT 'red'
		public Group getGroup() { return cGroup; }
		
		//value=INT
		public Assignment getValueAssignment_0() { return cValueAssignment_0; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_0_0() { return cValueINTTerminalRuleCall_0_0; }
		
		//'red'
		public Keyword getRedKeyword_1() { return cRedKeyword_1; }
	}
	public class GvalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.aut.islab.ghaemi.minuy.MyUiDsl.Gval");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cValueAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cValueINTTerminalRuleCall_0_0 = (RuleCall)cValueAssignment_0.eContents().get(0);
		private final Keyword cGrnKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Gval:
		//	value=INT 'grn';
		@Override public ParserRule getRule() { return rule; }
		
		//value=INT 'grn'
		public Group getGroup() { return cGroup; }
		
		//value=INT
		public Assignment getValueAssignment_0() { return cValueAssignment_0; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_0_0() { return cValueINTTerminalRuleCall_0_0; }
		
		//'grn'
		public Keyword getGrnKeyword_1() { return cGrnKeyword_1; }
	}
	public class BvalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.aut.islab.ghaemi.minuy.MyUiDsl.Bval");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cValueAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cValueINTTerminalRuleCall_0_0 = (RuleCall)cValueAssignment_0.eContents().get(0);
		private final Keyword cBluKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Bval:
		//	value=INT 'blu';
		@Override public ParserRule getRule() { return rule; }
		
		//value=INT 'blu'
		public Group getGroup() { return cGroup; }
		
		//value=INT
		public Assignment getValueAssignment_0() { return cValueAssignment_0; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_0_0() { return cValueINTTerminalRuleCall_0_0; }
		
		//'blu'
		public Keyword getBluKeyword_1() { return cBluKeyword_1; }
	}
	public class AvalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.aut.islab.ghaemi.minuy.MyUiDsl.Aval");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cValueAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cValueINTTerminalRuleCall_0_0 = (RuleCall)cValueAssignment_0.eContents().get(0);
		private final Keyword cAlfaKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Aval:
		//	value=INT 'alfa';
		@Override public ParserRule getRule() { return rule; }
		
		//value=INT 'alfa'
		public Group getGroup() { return cGroup; }
		
		//value=INT
		public Assignment getValueAssignment_0() { return cValueAssignment_0; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_0_0() { return cValueINTTerminalRuleCall_0_0; }
		
		//'alfa'
		public Keyword getAlfaKeyword_1() { return cAlfaKeyword_1; }
	}
	public class BorderRadElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.aut.islab.ghaemi.minuy.MyUiDsl.BorderRad");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cArcKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		private final Assignment cMeasureTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cMeasureTypeMeasureTypeParserRuleCall_2_0 = (RuleCall)cMeasureTypeAssignment_2.eContents().get(0);
		
		//BorderRad:
		//	'Arc:' value=INT measureType=measureType?;
		@Override public ParserRule getRule() { return rule; }
		
		//'Arc:' value=INT measureType=measureType?
		public Group getGroup() { return cGroup; }
		
		//'Arc:'
		public Keyword getArcKeyword_0() { return cArcKeyword_0; }
		
		//value=INT
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_1_0() { return cValueINTTerminalRuleCall_1_0; }
		
		//measureType=measureType?
		public Assignment getMeasureTypeAssignment_2() { return cMeasureTypeAssignment_2; }
		
		//measureType
		public RuleCall getMeasureTypeMeasureTypeParserRuleCall_2_0() { return cMeasureTypeMeasureTypeParserRuleCall_2_0; }
	}
	public class PosElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.aut.islab.ghaemi.minuy.MyUiDsl.Pos");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPosKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValuePosValsEnumRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//Pos:
		//	'Pos:' value=PosVals;
		@Override public ParserRule getRule() { return rule; }
		
		//'Pos:' value=PosVals
		public Group getGroup() { return cGroup; }
		
		//'Pos:'
		public Keyword getPosKeyword_0() { return cPosKeyword_0; }
		
		//value=PosVals
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//PosVals
		public RuleCall getValuePosValsEnumRuleCall_1_0() { return cValuePosValsEnumRuleCall_1_0; }
	}
	public class FltElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.aut.islab.ghaemi.minuy.MyUiDsl.Flt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFltKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueFltValsEnumRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//Flt:
		//	'Flt:' value=FltVals;
		@Override public ParserRule getRule() { return rule; }
		
		//'Flt:' value=FltVals
		public Group getGroup() { return cGroup; }
		
		//'Flt:'
		public Keyword getFltKeyword_0() { return cFltKeyword_0; }
		
		//value=FltVals
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//FltVals
		public RuleCall getValueFltValsEnumRuleCall_1_0() { return cValueFltValsEnumRuleCall_1_0; }
	}
	public class ClrElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.aut.islab.ghaemi.minuy.MyUiDsl.Clr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cClrKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueClrValsEnumRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//Clr:
		//	'Clr:' value=ClrVals;
		@Override public ParserRule getRule() { return rule; }
		
		//'Clr:' value=ClrVals
		public Group getGroup() { return cGroup; }
		
		//'Clr:'
		public Keyword getClrKeyword_0() { return cClrKeyword_0; }
		
		//value=ClrVals
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//ClrVals
		public RuleCall getValueClrValsEnumRuleCall_1_0() { return cValueClrValsEnumRuleCall_1_0; }
	}
	public class DispElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.aut.islab.ghaemi.minuy.MyUiDsl.Disp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDispKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueDispValsEnumRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//Disp:
		//	'Disp:' value=DispVals;
		@Override public ParserRule getRule() { return rule; }
		
		//'Disp:' value=DispVals
		public Group getGroup() { return cGroup; }
		
		//'Disp:'
		public Keyword getDispKeyword_0() { return cDispKeyword_0; }
		
		//value=DispVals
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//DispVals
		public RuleCall getValueDispValsEnumRuleCall_1_0() { return cValueDispValsEnumRuleCall_1_0; }
	}
	public class VerAlElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.aut.islab.ghaemi.minuy.MyUiDsl.VerAl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVer_AlKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueVeralValsEnumRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//VerAl:
		//	'Ver_Al:' value=VeralVals;
		@Override public ParserRule getRule() { return rule; }
		
		//'Ver_Al:' value=VeralVals
		public Group getGroup() { return cGroup; }
		
		//'Ver_Al:'
		public Keyword getVer_AlKeyword_0() { return cVer_AlKeyword_0; }
		
		//value=VeralVals
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//VeralVals
		public RuleCall getValueVeralValsEnumRuleCall_1_0() { return cValueVeralValsEnumRuleCall_1_0; }
	}
	public class OFlowElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.aut.islab.ghaemi.minuy.MyUiDsl.OFlow");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOFlowKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueOFlowValsEnumRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//OFlow:
		//	'OFlow:' value=OFlowVals;
		@Override public ParserRule getRule() { return rule; }
		
		//'OFlow:' value=OFlowVals
		public Group getGroup() { return cGroup; }
		
		//'OFlow:'
		public Keyword getOFlowKeyword_0() { return cOFlowKeyword_0; }
		
		//value=OFlowVals
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//OFlowVals
		public RuleCall getValueOFlowValsEnumRuleCall_1_0() { return cValueOFlowValsEnumRuleCall_1_0; }
	}
	public class WidElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.aut.islab.ghaemi.minuy.MyUiDsl.Wid");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWidKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueMinMaxValueParserRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//Wid:
		//	'Wid:' value=MinMaxValue;
		@Override public ParserRule getRule() { return rule; }
		
		//'Wid:' value=MinMaxValue
		public Group getGroup() { return cGroup; }
		
		//'Wid:'
		public Keyword getWidKeyword_0() { return cWidKeyword_0; }
		
		//value=MinMaxValue
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//MinMaxValue
		public RuleCall getValueMinMaxValueParserRuleCall_1_0() { return cValueMinMaxValueParserRuleCall_1_0; }
	}
	public class H8Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.aut.islab.ghaemi.minuy.MyUiDsl.H8");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cH8Keyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueMinMaxValueParserRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//H8:
		//	'H8:' value=MinMaxValue;
		@Override public ParserRule getRule() { return rule; }
		
		//'H8:' value=MinMaxValue
		public Group getGroup() { return cGroup; }
		
		//'H8:'
		public Keyword getH8Keyword_0() { return cH8Keyword_0; }
		
		//value=MinMaxValue
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//MinMaxValue
		public RuleCall getValueMinMaxValueParserRuleCall_1_0() { return cValueMinMaxValueParserRuleCall_1_0; }
	}
	public class CoordElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.aut.islab.ghaemi.minuy.MyUiDsl.Coord");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCoordKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueFourAspectParserRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//Coord:
		//	'Coord:' value=FourAspect;
		@Override public ParserRule getRule() { return rule; }
		
		//'Coord:' value=FourAspect
		public Group getGroup() { return cGroup; }
		
		//'Coord:'
		public Keyword getCoordKeyword_0() { return cCoordKeyword_0; }
		
		//value=FourAspect
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//FourAspect
		public RuleCall getValueFourAspectParserRuleCall_1_0() { return cValueFourAspectParserRuleCall_1_0; }
	}
	public class MargElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.aut.islab.ghaemi.minuy.MyUiDsl.Marg");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMargKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueFourAspectParserRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//Marg:
		//	'Marg:' value=FourAspect;
		@Override public ParserRule getRule() { return rule; }
		
		//'Marg:' value=FourAspect
		public Group getGroup() { return cGroup; }
		
		//'Marg:'
		public Keyword getMargKeyword_0() { return cMargKeyword_0; }
		
		//value=FourAspect
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//FourAspect
		public RuleCall getValueFourAspectParserRuleCall_1_0() { return cValueFourAspectParserRuleCall_1_0; }
	}
	public class PaddElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.aut.islab.ghaemi.minuy.MyUiDsl.Padd");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPaddKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueFourAspectParserRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//Padd:
		//	'Padd:' value=FourAspect;
		@Override public ParserRule getRule() { return rule; }
		
		//'Padd:' value=FourAspect
		public Group getGroup() { return cGroup; }
		
		//'Padd:'
		public Keyword getPaddKeyword_0() { return cPaddKeyword_0; }
		
		//value=FourAspect
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//FourAspect
		public RuleCall getValueFourAspectParserRuleCall_1_0() { return cValueFourAspectParserRuleCall_1_0; }
	}
	public class MinMaxValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.aut.islab.ghaemi.minuy.MyUiDsl.MinMaxValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cMinMaxValueAction_0 = (Action)cGroup.eContents().get(0);
		private final UnorderedGroup cUnorderedGroup_1 = (UnorderedGroup)cGroup.eContents().get(1);
		private final Assignment cMinValAssignment_1_0 = (Assignment)cUnorderedGroup_1.eContents().get(0);
		private final RuleCall cMinValMinValParserRuleCall_1_0_0 = (RuleCall)cMinValAssignment_1_0.eContents().get(0);
		private final Assignment cMaxValAssignment_1_1 = (Assignment)cUnorderedGroup_1.eContents().get(1);
		private final RuleCall cMaxValMaxValParserRuleCall_1_1_0 = (RuleCall)cMaxValAssignment_1_1.eContents().get(0);
		private final Assignment cMidValAssignment_1_2 = (Assignment)cUnorderedGroup_1.eContents().get(2);
		private final RuleCall cMidValMidValParserRuleCall_1_2_0 = (RuleCall)cMidValAssignment_1_2.eContents().get(0);
		
		//MinMaxValue:
		//	{MinMaxValue} (minVal=MinVal? & maxVal=MaxVal? & midVal=MidVal?);
		@Override public ParserRule getRule() { return rule; }
		
		//{MinMaxValue} (minVal=MinVal? & maxVal=MaxVal? & midVal=MidVal?)
		public Group getGroup() { return cGroup; }
		
		//{MinMaxValue}
		public Action getMinMaxValueAction_0() { return cMinMaxValueAction_0; }
		
		//(minVal=MinVal? & maxVal=MaxVal? & midVal=MidVal?)
		public UnorderedGroup getUnorderedGroup_1() { return cUnorderedGroup_1; }
		
		//minVal=MinVal?
		public Assignment getMinValAssignment_1_0() { return cMinValAssignment_1_0; }
		
		//MinVal
		public RuleCall getMinValMinValParserRuleCall_1_0_0() { return cMinValMinValParserRuleCall_1_0_0; }
		
		//maxVal=MaxVal?
		public Assignment getMaxValAssignment_1_1() { return cMaxValAssignment_1_1; }
		
		//MaxVal
		public RuleCall getMaxValMaxValParserRuleCall_1_1_0() { return cMaxValMaxValParserRuleCall_1_1_0; }
		
		//midVal=MidVal?
		public Assignment getMidValAssignment_1_2() { return cMidValAssignment_1_2; }
		
		//MidVal
		public RuleCall getMidValMidValParserRuleCall_1_2_0() { return cMidValMidValParserRuleCall_1_2_0; }
	}
	public class MinValElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.aut.islab.ghaemi.minuy.MyUiDsl.MinVal");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cValueAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cValueINTTerminalRuleCall_0_0 = (RuleCall)cValueAssignment_0.eContents().get(0);
		private final Keyword cLoKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cMeasureTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cMeasureTypeMeasureTypeParserRuleCall_2_0 = (RuleCall)cMeasureTypeAssignment_2.eContents().get(0);
		
		//MinVal:
		//	value=INT 'lo' measureType=measureType?;
		@Override public ParserRule getRule() { return rule; }
		
		//value=INT 'lo' measureType=measureType?
		public Group getGroup() { return cGroup; }
		
		//value=INT
		public Assignment getValueAssignment_0() { return cValueAssignment_0; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_0_0() { return cValueINTTerminalRuleCall_0_0; }
		
		//'lo'
		public Keyword getLoKeyword_1() { return cLoKeyword_1; }
		
		//measureType=measureType?
		public Assignment getMeasureTypeAssignment_2() { return cMeasureTypeAssignment_2; }
		
		//measureType
		public RuleCall getMeasureTypeMeasureTypeParserRuleCall_2_0() { return cMeasureTypeMeasureTypeParserRuleCall_2_0; }
	}
	public class MaxValElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.aut.islab.ghaemi.minuy.MyUiDsl.MaxVal");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cValueAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cValueINTTerminalRuleCall_0_0 = (RuleCall)cValueAssignment_0.eContents().get(0);
		private final Keyword cHiKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cMeasureTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cMeasureTypeMeasureTypeParserRuleCall_2_0 = (RuleCall)cMeasureTypeAssignment_2.eContents().get(0);
		
		//MaxVal:
		//	value=INT 'hi' measureType=measureType?;
		@Override public ParserRule getRule() { return rule; }
		
		//value=INT 'hi' measureType=measureType?
		public Group getGroup() { return cGroup; }
		
		//value=INT
		public Assignment getValueAssignment_0() { return cValueAssignment_0; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_0_0() { return cValueINTTerminalRuleCall_0_0; }
		
		//'hi'
		public Keyword getHiKeyword_1() { return cHiKeyword_1; }
		
		//measureType=measureType?
		public Assignment getMeasureTypeAssignment_2() { return cMeasureTypeAssignment_2; }
		
		//measureType
		public RuleCall getMeasureTypeMeasureTypeParserRuleCall_2_0() { return cMeasureTypeMeasureTypeParserRuleCall_2_0; }
	}
	public class MidValElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.aut.islab.ghaemi.minuy.MyUiDsl.MidVal");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cValueAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cValueINTTerminalRuleCall_0_0 = (RuleCall)cValueAssignment_0.eContents().get(0);
		private final Assignment cMeasureTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cMeasureTypeMeasureTypeParserRuleCall_1_0 = (RuleCall)cMeasureTypeAssignment_1.eContents().get(0);
		
		//MidVal:
		//	value=INT measureType=measureType?;
		@Override public ParserRule getRule() { return rule; }
		
		//value=INT measureType=measureType?
		public Group getGroup() { return cGroup; }
		
		//value=INT
		public Assignment getValueAssignment_0() { return cValueAssignment_0; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_0_0() { return cValueINTTerminalRuleCall_0_0; }
		
		//measureType=measureType?
		public Assignment getMeasureTypeAssignment_1() { return cMeasureTypeAssignment_1; }
		
		//measureType
		public RuleCall getMeasureTypeMeasureTypeParserRuleCall_1_0() { return cMeasureTypeMeasureTypeParserRuleCall_1_0; }
	}
	public class FourAspectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.aut.islab.ghaemi.minuy.MyUiDsl.FourAspect");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFourAspectAction_0 = (Action)cGroup.eContents().get(0);
		private final UnorderedGroup cUnorderedGroup_1 = (UnorderedGroup)cGroup.eContents().get(1);
		private final Assignment cLeftAssignment_1_0 = (Assignment)cUnorderedGroup_1.eContents().get(0);
		private final RuleCall cLeftLeftAspectParserRuleCall_1_0_0 = (RuleCall)cLeftAssignment_1_0.eContents().get(0);
		private final Assignment cRightAssignment_1_1 = (Assignment)cUnorderedGroup_1.eContents().get(1);
		private final RuleCall cRightRightAspectParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		private final Assignment cUpAssignment_1_2 = (Assignment)cUnorderedGroup_1.eContents().get(2);
		private final RuleCall cUpUpAspectParserRuleCall_1_2_0 = (RuleCall)cUpAssignment_1_2.eContents().get(0);
		private final Assignment cDownAssignment_1_3 = (Assignment)cUnorderedGroup_1.eContents().get(3);
		private final RuleCall cDownDownAspectParserRuleCall_1_3_0 = (RuleCall)cDownAssignment_1_3.eContents().get(0);
		
		//FourAspect:
		//	{FourAspect} (left=LeftAspect? & right=RightAspect? & up=UpAspect? & down=DownAspect?);
		@Override public ParserRule getRule() { return rule; }
		
		//{FourAspect} (left=LeftAspect? & right=RightAspect? & up=UpAspect? & down=DownAspect?)
		public Group getGroup() { return cGroup; }
		
		//{FourAspect}
		public Action getFourAspectAction_0() { return cFourAspectAction_0; }
		
		//(left=LeftAspect? & right=RightAspect? & up=UpAspect? & down=DownAspect?)
		public UnorderedGroup getUnorderedGroup_1() { return cUnorderedGroup_1; }
		
		//left=LeftAspect?
		public Assignment getLeftAssignment_1_0() { return cLeftAssignment_1_0; }
		
		//LeftAspect
		public RuleCall getLeftLeftAspectParserRuleCall_1_0_0() { return cLeftLeftAspectParserRuleCall_1_0_0; }
		
		//right=RightAspect?
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }
		
		//RightAspect
		public RuleCall getRightRightAspectParserRuleCall_1_1_0() { return cRightRightAspectParserRuleCall_1_1_0; }
		
		//up=UpAspect?
		public Assignment getUpAssignment_1_2() { return cUpAssignment_1_2; }
		
		//UpAspect
		public RuleCall getUpUpAspectParserRuleCall_1_2_0() { return cUpUpAspectParserRuleCall_1_2_0; }
		
		//down=DownAspect?
		public Assignment getDownAssignment_1_3() { return cDownAssignment_1_3; }
		
		//DownAspect
		public RuleCall getDownDownAspectParserRuleCall_1_3_0() { return cDownDownAspectParserRuleCall_1_3_0; }
	}
	public class LeftAspectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.aut.islab.ghaemi.minuy.MyUiDsl.LeftAspect");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cValueAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cValueINTTerminalRuleCall_0_0 = (RuleCall)cValueAssignment_0.eContents().get(0);
		private final Keyword cLeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cMeasureTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cMeasureTypeMeasureTypeParserRuleCall_2_0 = (RuleCall)cMeasureTypeAssignment_2.eContents().get(0);
		
		//LeftAspect:
		//	value=INT 'le' measureType=measureType?;
		@Override public ParserRule getRule() { return rule; }
		
		//value=INT 'le' measureType=measureType?
		public Group getGroup() { return cGroup; }
		
		//value=INT
		public Assignment getValueAssignment_0() { return cValueAssignment_0; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_0_0() { return cValueINTTerminalRuleCall_0_0; }
		
		//'le'
		public Keyword getLeKeyword_1() { return cLeKeyword_1; }
		
		//measureType=measureType?
		public Assignment getMeasureTypeAssignment_2() { return cMeasureTypeAssignment_2; }
		
		//measureType
		public RuleCall getMeasureTypeMeasureTypeParserRuleCall_2_0() { return cMeasureTypeMeasureTypeParserRuleCall_2_0; }
	}
	public class RightAspectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.aut.islab.ghaemi.minuy.MyUiDsl.RightAspect");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cValueAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cValueINTTerminalRuleCall_0_0 = (RuleCall)cValueAssignment_0.eContents().get(0);
		private final Keyword cRiKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cMeasureTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cMeasureTypeMeasureTypeParserRuleCall_2_0 = (RuleCall)cMeasureTypeAssignment_2.eContents().get(0);
		
		//RightAspect:
		//	value=INT 'ri' measureType=measureType?;
		@Override public ParserRule getRule() { return rule; }
		
		//value=INT 'ri' measureType=measureType?
		public Group getGroup() { return cGroup; }
		
		//value=INT
		public Assignment getValueAssignment_0() { return cValueAssignment_0; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_0_0() { return cValueINTTerminalRuleCall_0_0; }
		
		//'ri'
		public Keyword getRiKeyword_1() { return cRiKeyword_1; }
		
		//measureType=measureType?
		public Assignment getMeasureTypeAssignment_2() { return cMeasureTypeAssignment_2; }
		
		//measureType
		public RuleCall getMeasureTypeMeasureTypeParserRuleCall_2_0() { return cMeasureTypeMeasureTypeParserRuleCall_2_0; }
	}
	public class UpAspectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.aut.islab.ghaemi.minuy.MyUiDsl.UpAspect");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cValueAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cValueINTTerminalRuleCall_0_0 = (RuleCall)cValueAssignment_0.eContents().get(0);
		private final Keyword cUpKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cMeasureTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cMeasureTypeMeasureTypeParserRuleCall_2_0 = (RuleCall)cMeasureTypeAssignment_2.eContents().get(0);
		
		//UpAspect:
		//	value=INT 'up' measureType=measureType?;
		@Override public ParserRule getRule() { return rule; }
		
		//value=INT 'up' measureType=measureType?
		public Group getGroup() { return cGroup; }
		
		//value=INT
		public Assignment getValueAssignment_0() { return cValueAssignment_0; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_0_0() { return cValueINTTerminalRuleCall_0_0; }
		
		//'up'
		public Keyword getUpKeyword_1() { return cUpKeyword_1; }
		
		//measureType=measureType?
		public Assignment getMeasureTypeAssignment_2() { return cMeasureTypeAssignment_2; }
		
		//measureType
		public RuleCall getMeasureTypeMeasureTypeParserRuleCall_2_0() { return cMeasureTypeMeasureTypeParserRuleCall_2_0; }
	}
	public class DownAspectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.aut.islab.ghaemi.minuy.MyUiDsl.DownAspect");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cValueAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cValueINTTerminalRuleCall_0_0 = (RuleCall)cValueAssignment_0.eContents().get(0);
		private final Keyword cDnKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cMeasureTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cMeasureTypeMeasureTypeParserRuleCall_2_0 = (RuleCall)cMeasureTypeAssignment_2.eContents().get(0);
		
		//DownAspect:
		//	value=INT 'dn' measureType=measureType?;
		@Override public ParserRule getRule() { return rule; }
		
		//value=INT 'dn' measureType=measureType?
		public Group getGroup() { return cGroup; }
		
		//value=INT
		public Assignment getValueAssignment_0() { return cValueAssignment_0; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_0_0() { return cValueINTTerminalRuleCall_0_0; }
		
		//'dn'
		public Keyword getDnKeyword_1() { return cDnKeyword_1; }
		
		//measureType=measureType?
		public Assignment getMeasureTypeAssignment_2() { return cMeasureTypeAssignment_2; }
		
		//measureType
		public RuleCall getMeasureTypeMeasureTypeParserRuleCall_2_0() { return cMeasureTypeMeasureTypeParserRuleCall_2_0; }
	}
	public class MeasureTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.aut.islab.ghaemi.minuy.MyUiDsl.measureType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cEmKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cPercentSignKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cPxKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		
		//measureType:
		//	'em' | '%' | 'px';
		@Override public ParserRule getRule() { return rule; }
		
		//'em' | '%' | 'px'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'em'
		public Keyword getEmKeyword_0() { return cEmKeyword_0; }
		
		//'%'
		public Keyword getPercentSignKeyword_1() { return cPercentSignKeyword_1; }
		
		//'px'
		public Keyword getPxKeyword_2() { return cPxKeyword_2; }
	}
	
	public class PosValsElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "edu.aut.islab.ghaemi.minuy.MyUiDsl.PosVals");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cStaticEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cStaticStaticKeyword_0_0 = (Keyword)cStaticEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cRelativeEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cRelativeRelativeKeyword_1_0 = (Keyword)cRelativeEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cFixedEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cFixedFixedKeyword_2_0 = (Keyword)cFixedEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cAbsoluteEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cAbsoluteAbsoluteKeyword_3_0 = (Keyword)cAbsoluteEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cSteakyEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cSteakySteakyKeyword_4_0 = (Keyword)cSteakyEnumLiteralDeclaration_4.eContents().get(0);
		
		//enum PosVals:
		//	Static | Relative | Fixed | Absolute | Steaky;
		public EnumRule getRule() { return rule; }
		
		//Static | Relative | Fixed | Absolute | Steaky
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Static
		public EnumLiteralDeclaration getStaticEnumLiteralDeclaration_0() { return cStaticEnumLiteralDeclaration_0; }
		
		//"Static"
		public Keyword getStaticStaticKeyword_0_0() { return cStaticStaticKeyword_0_0; }
		
		//Relative
		public EnumLiteralDeclaration getRelativeEnumLiteralDeclaration_1() { return cRelativeEnumLiteralDeclaration_1; }
		
		//"Relative"
		public Keyword getRelativeRelativeKeyword_1_0() { return cRelativeRelativeKeyword_1_0; }
		
		//Fixed
		public EnumLiteralDeclaration getFixedEnumLiteralDeclaration_2() { return cFixedEnumLiteralDeclaration_2; }
		
		//"Fixed"
		public Keyword getFixedFixedKeyword_2_0() { return cFixedFixedKeyword_2_0; }
		
		//Absolute
		public EnumLiteralDeclaration getAbsoluteEnumLiteralDeclaration_3() { return cAbsoluteEnumLiteralDeclaration_3; }
		
		//"Absolute"
		public Keyword getAbsoluteAbsoluteKeyword_3_0() { return cAbsoluteAbsoluteKeyword_3_0; }
		
		//Steaky
		public EnumLiteralDeclaration getSteakyEnumLiteralDeclaration_4() { return cSteakyEnumLiteralDeclaration_4; }
		
		//"Steaky"
		public Keyword getSteakySteakyKeyword_4_0() { return cSteakySteakyKeyword_4_0; }
	}
	public class FltValsElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "edu.aut.islab.ghaemi.minuy.MyUiDsl.FltVals");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cLeftEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cLeftLeftKeyword_0_0 = (Keyword)cLeftEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cRightEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cRightRightKeyword_1_0 = (Keyword)cRightEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cNoneEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cNoneNoneKeyword_2_0 = (Keyword)cNoneEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cStartEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cStartStartKeyword_3_0 = (Keyword)cStartEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cEndEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cEndEndKeyword_4_0 = (Keyword)cEndEnumLiteralDeclaration_4.eContents().get(0);
		
		//enum FltVals:
		//	Left | Right | None | Start | End;
		public EnumRule getRule() { return rule; }
		
		//Left | Right | None | Start | End
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Left
		public EnumLiteralDeclaration getLeftEnumLiteralDeclaration_0() { return cLeftEnumLiteralDeclaration_0; }
		
		//"Left"
		public Keyword getLeftLeftKeyword_0_0() { return cLeftLeftKeyword_0_0; }
		
		//Right
		public EnumLiteralDeclaration getRightEnumLiteralDeclaration_1() { return cRightEnumLiteralDeclaration_1; }
		
		//"Right"
		public Keyword getRightRightKeyword_1_0() { return cRightRightKeyword_1_0; }
		
		//None
		public EnumLiteralDeclaration getNoneEnumLiteralDeclaration_2() { return cNoneEnumLiteralDeclaration_2; }
		
		//"None"
		public Keyword getNoneNoneKeyword_2_0() { return cNoneNoneKeyword_2_0; }
		
		//Start
		public EnumLiteralDeclaration getStartEnumLiteralDeclaration_3() { return cStartEnumLiteralDeclaration_3; }
		
		//"Start"
		public Keyword getStartStartKeyword_3_0() { return cStartStartKeyword_3_0; }
		
		//End
		public EnumLiteralDeclaration getEndEnumLiteralDeclaration_4() { return cEndEnumLiteralDeclaration_4; }
		
		//"End"
		public Keyword getEndEndKeyword_4_0() { return cEndEndKeyword_4_0; }
	}
	public class ClrValsElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "edu.aut.islab.ghaemi.minuy.MyUiDsl.ClrVals");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cLeftEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cLeftLeftKeyword_0_0 = (Keyword)cLeftEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cRightEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cRightRightKeyword_1_0 = (Keyword)cRightEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cBothEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cBothBothKeyword_2_0 = (Keyword)cBothEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cNoneEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cNoneNoneKeyword_3_0 = (Keyword)cNoneEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum ClrVals:
		//	Left | Right | Both | None;
		public EnumRule getRule() { return rule; }
		
		//Left | Right | Both | None
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Left
		public EnumLiteralDeclaration getLeftEnumLiteralDeclaration_0() { return cLeftEnumLiteralDeclaration_0; }
		
		//"Left"
		public Keyword getLeftLeftKeyword_0_0() { return cLeftLeftKeyword_0_0; }
		
		//Right
		public EnumLiteralDeclaration getRightEnumLiteralDeclaration_1() { return cRightEnumLiteralDeclaration_1; }
		
		//"Right"
		public Keyword getRightRightKeyword_1_0() { return cRightRightKeyword_1_0; }
		
		//Both
		public EnumLiteralDeclaration getBothEnumLiteralDeclaration_2() { return cBothEnumLiteralDeclaration_2; }
		
		//"Both"
		public Keyword getBothBothKeyword_2_0() { return cBothBothKeyword_2_0; }
		
		//None
		public EnumLiteralDeclaration getNoneEnumLiteralDeclaration_3() { return cNoneEnumLiteralDeclaration_3; }
		
		//"None"
		public Keyword getNoneNoneKeyword_3_0() { return cNoneNoneKeyword_3_0; }
	}
	public class DispValsElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "edu.aut.islab.ghaemi.minuy.MyUiDsl.DispVals");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cBlockEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cBlockBlockKeyword_0_0 = (Keyword)cBlockEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cInlineEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cInlineInlineKeyword_1_0 = (Keyword)cInlineEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cInBlEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cInBlInBlKeyword_2_0 = (Keyword)cInBlEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cTableEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cTableTableKeyword_3_0 = (Keyword)cTableEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cNoneEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cNoneNoneKeyword_4_0 = (Keyword)cNoneEnumLiteralDeclaration_4.eContents().get(0);
		
		//enum DispVals:
		//	Block | Inline | InBl | Table | None;
		public EnumRule getRule() { return rule; }
		
		//Block | Inline | InBl | Table | None
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Block
		public EnumLiteralDeclaration getBlockEnumLiteralDeclaration_0() { return cBlockEnumLiteralDeclaration_0; }
		
		//"Block"
		public Keyword getBlockBlockKeyword_0_0() { return cBlockBlockKeyword_0_0; }
		
		//Inline
		public EnumLiteralDeclaration getInlineEnumLiteralDeclaration_1() { return cInlineEnumLiteralDeclaration_1; }
		
		//"Inline"
		public Keyword getInlineInlineKeyword_1_0() { return cInlineInlineKeyword_1_0; }
		
		//InBl
		public EnumLiteralDeclaration getInBlEnumLiteralDeclaration_2() { return cInBlEnumLiteralDeclaration_2; }
		
		//"InBl"
		public Keyword getInBlInBlKeyword_2_0() { return cInBlInBlKeyword_2_0; }
		
		//Table
		public EnumLiteralDeclaration getTableEnumLiteralDeclaration_3() { return cTableEnumLiteralDeclaration_3; }
		
		//"Table"
		public Keyword getTableTableKeyword_3_0() { return cTableTableKeyword_3_0; }
		
		//None
		public EnumLiteralDeclaration getNoneEnumLiteralDeclaration_4() { return cNoneEnumLiteralDeclaration_4; }
		
		//"None"
		public Keyword getNoneNoneKeyword_4_0() { return cNoneNoneKeyword_4_0; }
	}
	public class VeralValsElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "edu.aut.islab.ghaemi.minuy.MyUiDsl.VeralVals");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cTopEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cTopTopKeyword_0_0 = (Keyword)cTopEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cDownEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cDownDownKeyword_1_0 = (Keyword)cDownEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cCenterEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cCenterCenterKeyword_2_0 = (Keyword)cCenterEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum VeralVals:
		//	Top | Down | Center;
		public EnumRule getRule() { return rule; }
		
		//Top | Down | Center
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Top
		public EnumLiteralDeclaration getTopEnumLiteralDeclaration_0() { return cTopEnumLiteralDeclaration_0; }
		
		//"Top"
		public Keyword getTopTopKeyword_0_0() { return cTopTopKeyword_0_0; }
		
		//Down
		public EnumLiteralDeclaration getDownEnumLiteralDeclaration_1() { return cDownEnumLiteralDeclaration_1; }
		
		//"Down"
		public Keyword getDownDownKeyword_1_0() { return cDownDownKeyword_1_0; }
		
		//Center
		public EnumLiteralDeclaration getCenterEnumLiteralDeclaration_2() { return cCenterEnumLiteralDeclaration_2; }
		
		//"Center"
		public Keyword getCenterCenterKeyword_2_0() { return cCenterCenterKeyword_2_0; }
	}
	public class OFlowValsElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "edu.aut.islab.ghaemi.minuy.MyUiDsl.OFlowVals");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cScrollEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cScrollScrollKeyword_0_0 = (Keyword)cScrollEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cVisibleEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cVisibleVisibleKeyword_1_0 = (Keyword)cVisibleEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cHiddenEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cHiddenHiddenKeyword_2_0 = (Keyword)cHiddenEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cAutoEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cAutoAutoKeyword_3_0 = (Keyword)cAutoEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum OFlowVals:
		//	Scroll | Visible | Hidden | Auto;
		public EnumRule getRule() { return rule; }
		
		//Scroll | Visible | Hidden | Auto
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Scroll
		public EnumLiteralDeclaration getScrollEnumLiteralDeclaration_0() { return cScrollEnumLiteralDeclaration_0; }
		
		//"Scroll"
		public Keyword getScrollScrollKeyword_0_0() { return cScrollScrollKeyword_0_0; }
		
		//Visible
		public EnumLiteralDeclaration getVisibleEnumLiteralDeclaration_1() { return cVisibleEnumLiteralDeclaration_1; }
		
		//"Visible"
		public Keyword getVisibleVisibleKeyword_1_0() { return cVisibleVisibleKeyword_1_0; }
		
		//Hidden
		public EnumLiteralDeclaration getHiddenEnumLiteralDeclaration_2() { return cHiddenEnumLiteralDeclaration_2; }
		
		//"Hidden"
		public Keyword getHiddenHiddenKeyword_2_0() { return cHiddenHiddenKeyword_2_0; }
		
		//Auto
		public EnumLiteralDeclaration getAutoEnumLiteralDeclaration_3() { return cAutoEnumLiteralDeclaration_3; }
		
		//"Auto"
		public Keyword getAutoAutoKeyword_3_0() { return cAutoAutoKeyword_3_0; }
	}
	public class InnerTypeArrayElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "edu.aut.islab.ghaemi.minuy.MyUiDsl.InnerTypeArray");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cDivEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cDivDivKeyword_0_0 = (Keyword)cDivEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cParaEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cParaParaKeyword_1_0 = (Keyword)cParaEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cInputEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cInputInputKeyword_2_0 = (Keyword)cInputEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cTableEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cTableTableKeyword_3_0 = (Keyword)cTableEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cTrEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cTrTrKeyword_4_0 = (Keyword)cTrEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cTdEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cTdTdKeyword_5_0 = (Keyword)cTdEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cImgEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cImgImgKeyword_6_0 = (Keyword)cImgEnumLiteralDeclaration_6.eContents().get(0);
		private final EnumLiteralDeclaration cFormEnumLiteralDeclaration_7 = (EnumLiteralDeclaration)cAlternatives.eContents().get(7);
		private final Keyword cFormFormKeyword_7_0 = (Keyword)cFormEnumLiteralDeclaration_7.eContents().get(0);
		private final EnumLiteralDeclaration cButtonEnumLiteralDeclaration_8 = (EnumLiteralDeclaration)cAlternatives.eContents().get(8);
		private final Keyword cButtonButtonKeyword_8_0 = (Keyword)cButtonEnumLiteralDeclaration_8.eContents().get(0);
		
		//enum InnerTypeArray:
		//	Div | Para | Input | Table | Tr | Td | Img | Form | Button;
		public EnumRule getRule() { return rule; }
		
		//Div | Para | Input | Table | Tr | Td | Img | Form | Button
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Div
		public EnumLiteralDeclaration getDivEnumLiteralDeclaration_0() { return cDivEnumLiteralDeclaration_0; }
		
		//"Div"
		public Keyword getDivDivKeyword_0_0() { return cDivDivKeyword_0_0; }
		
		//Para
		public EnumLiteralDeclaration getParaEnumLiteralDeclaration_1() { return cParaEnumLiteralDeclaration_1; }
		
		//"Para"
		public Keyword getParaParaKeyword_1_0() { return cParaParaKeyword_1_0; }
		
		//Input
		public EnumLiteralDeclaration getInputEnumLiteralDeclaration_2() { return cInputEnumLiteralDeclaration_2; }
		
		//"Input"
		public Keyword getInputInputKeyword_2_0() { return cInputInputKeyword_2_0; }
		
		//Table
		public EnumLiteralDeclaration getTableEnumLiteralDeclaration_3() { return cTableEnumLiteralDeclaration_3; }
		
		//"Table"
		public Keyword getTableTableKeyword_3_0() { return cTableTableKeyword_3_0; }
		
		//Tr
		public EnumLiteralDeclaration getTrEnumLiteralDeclaration_4() { return cTrEnumLiteralDeclaration_4; }
		
		//"Tr"
		public Keyword getTrTrKeyword_4_0() { return cTrTrKeyword_4_0; }
		
		//Td
		public EnumLiteralDeclaration getTdEnumLiteralDeclaration_5() { return cTdEnumLiteralDeclaration_5; }
		
		//"Td"
		public Keyword getTdTdKeyword_5_0() { return cTdTdKeyword_5_0; }
		
		//Img
		public EnumLiteralDeclaration getImgEnumLiteralDeclaration_6() { return cImgEnumLiteralDeclaration_6; }
		
		//"Img"
		public Keyword getImgImgKeyword_6_0() { return cImgImgKeyword_6_0; }
		
		//Form
		public EnumLiteralDeclaration getFormEnumLiteralDeclaration_7() { return cFormEnumLiteralDeclaration_7; }
		
		//"Form"
		public Keyword getFormFormKeyword_7_0() { return cFormFormKeyword_7_0; }
		
		//Button
		public EnumLiteralDeclaration getButtonEnumLiteralDeclaration_8() { return cButtonEnumLiteralDeclaration_8; }
		
		//"Button"
		public Keyword getButtonButtonKeyword_8_0() { return cButtonButtonKeyword_8_0; }
	}
	
	private final ModelElements pModel;
	private final HeadElements pHead;
	private final HeadTypeElements pHeadType;
	private final BodyElements pBody;
	private final NodeElements pNode;
	private final SelfRepeatElements pSelfRepeat;
	private final AccessoryElements pAccessory;
	private final InnerFeatureElements pInnerFeature;
	private final InnerTextElements pInnerText;
	private final InnerStyleElements pInnerStyle;
	private final InnerClassElements pInnerClass;
	private final ClassNameElements pClassName;
	private final ClassNameSecElements pClassNameSec;
	private final InnerTypeElements pInnerType;
	private final CssStylesElements pCssStyles;
	private final CssStyleElements pCssStyle;
	private final BorderElements pBorder;
	private final ColorElements pColor;
	private final BackColorElements pBackColor;
	private final ColorDefElements pColorDef;
	private final LiteralColorElements pLiteralColor;
	private final RgbaColorElements pRgbaColor;
	private final RvalElements pRval;
	private final GvalElements pGval;
	private final BvalElements pBval;
	private final AvalElements pAval;
	private final BorderRadElements pBorderRad;
	private final PosElements pPos;
	private final PosValsElements ePosVals;
	private final FltElements pFlt;
	private final FltValsElements eFltVals;
	private final ClrElements pClr;
	private final ClrValsElements eClrVals;
	private final DispElements pDisp;
	private final DispValsElements eDispVals;
	private final VerAlElements pVerAl;
	private final VeralValsElements eVeralVals;
	private final OFlowElements pOFlow;
	private final OFlowValsElements eOFlowVals;
	private final WidElements pWid;
	private final H8Elements pH8;
	private final CoordElements pCoord;
	private final MargElements pMarg;
	private final PaddElements pPadd;
	private final MinMaxValueElements pMinMaxValue;
	private final MinValElements pMinVal;
	private final MaxValElements pMaxVal;
	private final MidValElements pMidVal;
	private final FourAspectElements pFourAspect;
	private final LeftAspectElements pLeftAspect;
	private final RightAspectElements pRightAspect;
	private final UpAspectElements pUpAspect;
	private final DownAspectElements pDownAspect;
	private final MeasureTypeElements pMeasureType;
	private final InnerTypeArrayElements eInnerTypeArray;
	private final TerminalRule tOneChar;
	private final TerminalRule tSTRING2;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public MyUiDslGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pHead = new HeadElements();
		this.pHeadType = new HeadTypeElements();
		this.pBody = new BodyElements();
		this.pNode = new NodeElements();
		this.pSelfRepeat = new SelfRepeatElements();
		this.pAccessory = new AccessoryElements();
		this.pInnerFeature = new InnerFeatureElements();
		this.pInnerText = new InnerTextElements();
		this.pInnerStyle = new InnerStyleElements();
		this.pInnerClass = new InnerClassElements();
		this.pClassName = new ClassNameElements();
		this.pClassNameSec = new ClassNameSecElements();
		this.pInnerType = new InnerTypeElements();
		this.pCssStyles = new CssStylesElements();
		this.pCssStyle = new CssStyleElements();
		this.pBorder = new BorderElements();
		this.pColor = new ColorElements();
		this.pBackColor = new BackColorElements();
		this.pColorDef = new ColorDefElements();
		this.pLiteralColor = new LiteralColorElements();
		this.pRgbaColor = new RgbaColorElements();
		this.pRval = new RvalElements();
		this.pGval = new GvalElements();
		this.pBval = new BvalElements();
		this.pAval = new AvalElements();
		this.pBorderRad = new BorderRadElements();
		this.pPos = new PosElements();
		this.ePosVals = new PosValsElements();
		this.pFlt = new FltElements();
		this.eFltVals = new FltValsElements();
		this.pClr = new ClrElements();
		this.eClrVals = new ClrValsElements();
		this.pDisp = new DispElements();
		this.eDispVals = new DispValsElements();
		this.pVerAl = new VerAlElements();
		this.eVeralVals = new VeralValsElements();
		this.pOFlow = new OFlowElements();
		this.eOFlowVals = new OFlowValsElements();
		this.pWid = new WidElements();
		this.pH8 = new H8Elements();
		this.pCoord = new CoordElements();
		this.pMarg = new MargElements();
		this.pPadd = new PaddElements();
		this.pMinMaxValue = new MinMaxValueElements();
		this.pMinVal = new MinValElements();
		this.pMaxVal = new MaxValElements();
		this.pMidVal = new MidValElements();
		this.pFourAspect = new FourAspectElements();
		this.pLeftAspect = new LeftAspectElements();
		this.pRightAspect = new RightAspectElements();
		this.pUpAspect = new UpAspectElements();
		this.pDownAspect = new DownAspectElements();
		this.pMeasureType = new MeasureTypeElements();
		this.eInnerTypeArray = new InnerTypeArrayElements();
		this.tOneChar = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "edu.aut.islab.ghaemi.minuy.MyUiDsl.OneChar");
		this.tSTRING2 = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "edu.aut.islab.ghaemi.minuy.MyUiDsl.STRING2");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("edu.aut.islab.ghaemi.minuy.MyUiDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	heads+=Head* '|' bodis+=Body+ '|' accessories+=Accessory*;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//Head:
	//	'import' fileName=ID 'as' headType=HeadType ';';
	public HeadElements getHeadAccess() {
		return pHead;
	}
	
	public ParserRule getHeadRule() {
		return getHeadAccess().getRule();
	}
	
	//HeadType:
	//	'_CSS' | '_JS' | OneChar;
	public HeadTypeElements getHeadTypeAccess() {
		return pHeadType;
	}
	
	public ParserRule getHeadTypeRule() {
		return getHeadTypeAccess().getRule();
	}
	
	//Body:
	//	name=Node '->' right+=Node+ selfRepeat=SelfRepeat? ';';
	public BodyElements getBodyAccess() {
		return pBody;
	}
	
	public ParserRule getBodyRule() {
		return getBodyAccess().getRule();
	}
	
	//Node:
	//	name=OneChar;
	public NodeElements getNodeAccess() {
		return pNode;
	}
	
	public ParserRule getNodeRule() {
		return getNodeAccess().getRule();
	}
	
	//SelfRepeat:
	//	number=INT vertical?='*'?;
	public SelfRepeatElements getSelfRepeatAccess() {
		return pSelfRepeat;
	}
	
	public ParserRule getSelfRepeatRule() {
		return getSelfRepeatAccess().getRule();
	}
	
	//Accessory:
	//	left=Node ':' (text=InnerText? & style=InnerStyle? & clazz=InnerClass? & type=InnerType? & feature=InnerFeature?);
	public AccessoryElements getAccessoryAccess() {
		return pAccessory;
	}
	
	public ParserRule getAccessoryRule() {
		return getAccessoryAccess().getRule();
	}
	
	//InnerFeature:
	//	{InnerFeature} value=STRING2;
	public InnerFeatureElements getInnerFeatureAccess() {
		return pInnerFeature;
	}
	
	public ParserRule getInnerFeatureRule() {
		return getInnerFeatureAccess().getRule();
	}
	
	//InnerText:
	//	'<' value=ID '>';
	public InnerTextElements getInnerTextAccess() {
		return pInnerText;
	}
	
	public ParserRule getInnerTextRule() {
		return getInnerTextAccess().getRule();
	}
	
	//InnerStyle:
	//	'(' {InnerStyle} styles+=CssStyle* ')';
	public InnerStyleElements getInnerStyleAccess() {
		return pInnerStyle;
	}
	
	public ParserRule getInnerStyleRule() {
		return getInnerStyleAccess().getRule();
	}
	
	//InnerClass:
	//	'[' clazzes=ClassName ']';
	public InnerClassElements getInnerClassAccess() {
		return pInnerClass;
	}
	
	public ParserRule getInnerClassRule() {
		return getInnerClassAccess().getRule();
	}
	
	//ClassName:
	//	theId=ID? clazz+=ClassNameSec*;
	public ClassNameElements getClassNameAccess() {
		return pClassName;
	}
	
	public ParserRule getClassNameRule() {
		return getClassNameAccess().getRule();
	}
	
	//ClassNameSec:
	//	',' cfClazz=ID;
	public ClassNameSecElements getClassNameSecAccess() {
		return pClassNameSec;
	}
	
	public ParserRule getClassNameSecRule() {
		return getClassNameSecAccess().getRule();
	}
	
	//InnerType:
	//	'{' value=InnerTypeArray '}';
	public InnerTypeElements getInnerTypeAccess() {
		return pInnerType;
	}
	
	public ParserRule getInnerTypeRule() {
		return getInnerTypeAccess().getRule();
	}
	
	//CssStyles:
	//	styles=CssStyle;
	public CssStylesElements getCssStylesAccess() {
		return pCssStyles;
	}
	
	public ParserRule getCssStylesRule() {
		return getCssStylesAccess().getRule();
	}
	
	//CssStyle:
	//	(Pos | Flt | Clr | Disp | VerAl | Wid | H8 | Coord | OFlow | Marg | Padd | Border | BorderRad | Color | BackColor)
	//	';';
	public CssStyleElements getCssStyleAccess() {
		return pCssStyle;
	}
	
	public ParserRule getCssStyleRule() {
		return getCssStyleAccess().getRule();
	}
	
	//Border:
	//	'border:' value=colorDef;
	public BorderElements getBorderAccess() {
		return pBorder;
	}
	
	public ParserRule getBorderRule() {
		return getBorderAccess().getRule();
	}
	
	//Color:
	//	'color:' value=colorDef;
	public ColorElements getColorAccess() {
		return pColor;
	}
	
	public ParserRule getColorRule() {
		return getColorAccess().getRule();
	}
	
	//BackColor:
	//	'bcolor:' value=colorDef;
	public BackColorElements getBackColorAccess() {
		return pBackColor;
	}
	
	public ParserRule getBackColorRule() {
		return getBackColorAccess().getRule();
	}
	
	//colorDef:
	//	LiteralColor | RgbaColor;
	public ColorDefElements getColorDefAccess() {
		return pColorDef;
	}
	
	public ParserRule getColorDefRule() {
		return getColorDefAccess().getRule();
	}
	
	//LiteralColor:
	//	value=("Red" | "Blue" | "Black" | "Green" | "Yellow" | "Pink" | "Brown" | "Gold" | "White" | "Grey");
	public LiteralColorElements getLiteralColorAccess() {
		return pLiteralColor;
	}
	
	public ParserRule getLiteralColorRule() {
		return getLiteralColorAccess().getRule();
	}
	
	//RgbaColor:
	//	'rgba(' (rval=Rval? & gval=Gval? & bval=Bval? & aval=Aval?) ')';
	public RgbaColorElements getRgbaColorAccess() {
		return pRgbaColor;
	}
	
	public ParserRule getRgbaColorRule() {
		return getRgbaColorAccess().getRule();
	}
	
	//Rval:
	//	value=INT 'red';
	public RvalElements getRvalAccess() {
		return pRval;
	}
	
	public ParserRule getRvalRule() {
		return getRvalAccess().getRule();
	}
	
	//Gval:
	//	value=INT 'grn';
	public GvalElements getGvalAccess() {
		return pGval;
	}
	
	public ParserRule getGvalRule() {
		return getGvalAccess().getRule();
	}
	
	//Bval:
	//	value=INT 'blu';
	public BvalElements getBvalAccess() {
		return pBval;
	}
	
	public ParserRule getBvalRule() {
		return getBvalAccess().getRule();
	}
	
	//Aval:
	//	value=INT 'alfa';
	public AvalElements getAvalAccess() {
		return pAval;
	}
	
	public ParserRule getAvalRule() {
		return getAvalAccess().getRule();
	}
	
	//BorderRad:
	//	'Arc:' value=INT measureType=measureType?;
	public BorderRadElements getBorderRadAccess() {
		return pBorderRad;
	}
	
	public ParserRule getBorderRadRule() {
		return getBorderRadAccess().getRule();
	}
	
	//Pos:
	//	'Pos:' value=PosVals;
	public PosElements getPosAccess() {
		return pPos;
	}
	
	public ParserRule getPosRule() {
		return getPosAccess().getRule();
	}
	
	//enum PosVals:
	//	Static | Relative | Fixed | Absolute | Steaky;
	public PosValsElements getPosValsAccess() {
		return ePosVals;
	}
	
	public EnumRule getPosValsRule() {
		return getPosValsAccess().getRule();
	}
	
	//Flt:
	//	'Flt:' value=FltVals;
	public FltElements getFltAccess() {
		return pFlt;
	}
	
	public ParserRule getFltRule() {
		return getFltAccess().getRule();
	}
	
	//enum FltVals:
	//	Left | Right | None | Start | End;
	public FltValsElements getFltValsAccess() {
		return eFltVals;
	}
	
	public EnumRule getFltValsRule() {
		return getFltValsAccess().getRule();
	}
	
	//Clr:
	//	'Clr:' value=ClrVals;
	public ClrElements getClrAccess() {
		return pClr;
	}
	
	public ParserRule getClrRule() {
		return getClrAccess().getRule();
	}
	
	//enum ClrVals:
	//	Left | Right | Both | None;
	public ClrValsElements getClrValsAccess() {
		return eClrVals;
	}
	
	public EnumRule getClrValsRule() {
		return getClrValsAccess().getRule();
	}
	
	//Disp:
	//	'Disp:' value=DispVals;
	public DispElements getDispAccess() {
		return pDisp;
	}
	
	public ParserRule getDispRule() {
		return getDispAccess().getRule();
	}
	
	//enum DispVals:
	//	Block | Inline | InBl | Table | None;
	public DispValsElements getDispValsAccess() {
		return eDispVals;
	}
	
	public EnumRule getDispValsRule() {
		return getDispValsAccess().getRule();
	}
	
	//VerAl:
	//	'Ver_Al:' value=VeralVals;
	public VerAlElements getVerAlAccess() {
		return pVerAl;
	}
	
	public ParserRule getVerAlRule() {
		return getVerAlAccess().getRule();
	}
	
	//enum VeralVals:
	//	Top | Down | Center;
	public VeralValsElements getVeralValsAccess() {
		return eVeralVals;
	}
	
	public EnumRule getVeralValsRule() {
		return getVeralValsAccess().getRule();
	}
	
	//OFlow:
	//	'OFlow:' value=OFlowVals;
	public OFlowElements getOFlowAccess() {
		return pOFlow;
	}
	
	public ParserRule getOFlowRule() {
		return getOFlowAccess().getRule();
	}
	
	//enum OFlowVals:
	//	Scroll | Visible | Hidden | Auto;
	public OFlowValsElements getOFlowValsAccess() {
		return eOFlowVals;
	}
	
	public EnumRule getOFlowValsRule() {
		return getOFlowValsAccess().getRule();
	}
	
	//Wid:
	//	'Wid:' value=MinMaxValue;
	public WidElements getWidAccess() {
		return pWid;
	}
	
	public ParserRule getWidRule() {
		return getWidAccess().getRule();
	}
	
	//H8:
	//	'H8:' value=MinMaxValue;
	public H8Elements getH8Access() {
		return pH8;
	}
	
	public ParserRule getH8Rule() {
		return getH8Access().getRule();
	}
	
	//Coord:
	//	'Coord:' value=FourAspect;
	public CoordElements getCoordAccess() {
		return pCoord;
	}
	
	public ParserRule getCoordRule() {
		return getCoordAccess().getRule();
	}
	
	//Marg:
	//	'Marg:' value=FourAspect;
	public MargElements getMargAccess() {
		return pMarg;
	}
	
	public ParserRule getMargRule() {
		return getMargAccess().getRule();
	}
	
	//Padd:
	//	'Padd:' value=FourAspect;
	public PaddElements getPaddAccess() {
		return pPadd;
	}
	
	public ParserRule getPaddRule() {
		return getPaddAccess().getRule();
	}
	
	//MinMaxValue:
	//	{MinMaxValue} (minVal=MinVal? & maxVal=MaxVal? & midVal=MidVal?);
	public MinMaxValueElements getMinMaxValueAccess() {
		return pMinMaxValue;
	}
	
	public ParserRule getMinMaxValueRule() {
		return getMinMaxValueAccess().getRule();
	}
	
	//MinVal:
	//	value=INT 'lo' measureType=measureType?;
	public MinValElements getMinValAccess() {
		return pMinVal;
	}
	
	public ParserRule getMinValRule() {
		return getMinValAccess().getRule();
	}
	
	//MaxVal:
	//	value=INT 'hi' measureType=measureType?;
	public MaxValElements getMaxValAccess() {
		return pMaxVal;
	}
	
	public ParserRule getMaxValRule() {
		return getMaxValAccess().getRule();
	}
	
	//MidVal:
	//	value=INT measureType=measureType?;
	public MidValElements getMidValAccess() {
		return pMidVal;
	}
	
	public ParserRule getMidValRule() {
		return getMidValAccess().getRule();
	}
	
	//FourAspect:
	//	{FourAspect} (left=LeftAspect? & right=RightAspect? & up=UpAspect? & down=DownAspect?);
	public FourAspectElements getFourAspectAccess() {
		return pFourAspect;
	}
	
	public ParserRule getFourAspectRule() {
		return getFourAspectAccess().getRule();
	}
	
	//LeftAspect:
	//	value=INT 'le' measureType=measureType?;
	public LeftAspectElements getLeftAspectAccess() {
		return pLeftAspect;
	}
	
	public ParserRule getLeftAspectRule() {
		return getLeftAspectAccess().getRule();
	}
	
	//RightAspect:
	//	value=INT 'ri' measureType=measureType?;
	public RightAspectElements getRightAspectAccess() {
		return pRightAspect;
	}
	
	public ParserRule getRightAspectRule() {
		return getRightAspectAccess().getRule();
	}
	
	//UpAspect:
	//	value=INT 'up' measureType=measureType?;
	public UpAspectElements getUpAspectAccess() {
		return pUpAspect;
	}
	
	public ParserRule getUpAspectRule() {
		return getUpAspectAccess().getRule();
	}
	
	//DownAspect:
	//	value=INT 'dn' measureType=measureType?;
	public DownAspectElements getDownAspectAccess() {
		return pDownAspect;
	}
	
	public ParserRule getDownAspectRule() {
		return getDownAspectAccess().getRule();
	}
	
	//measureType:
	//	'em' | '%' | 'px';
	public MeasureTypeElements getMeasureTypeAccess() {
		return pMeasureType;
	}
	
	public ParserRule getMeasureTypeRule() {
		return getMeasureTypeAccess().getRule();
	}
	
	//enum InnerTypeArray:
	//	Div | Para | Input | Table | Tr | Td | Img | Form | Button;
	public InnerTypeArrayElements getInnerTypeArrayAccess() {
		return eInnerTypeArray;
	}
	
	public EnumRule getInnerTypeArrayRule() {
		return getInnerTypeArrayAccess().getRule();
	}
	
	//terminal OneChar returns ecore::EChar:
	//	'a'..'z' | 'A'..'Z';
	public TerminalRule getOneCharRule() {
		return tOneChar;
	}
	
	//terminal STRING2:
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRING2Rule() {
		return tSTRING2;
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
