/*
 * generated by Xtext 2.10.0
 */
grammar InternalMyUiDsl;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package edu.aut.islab.ghaemi.minuy.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package edu.aut.islab.ghaemi.minuy.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import edu.aut.islab.ghaemi.minuy.services.MyUiDslGrammarAccess;

}
@parser::members {
	private MyUiDslGrammarAccess grammarAccess;

	public void setGrammarAccess(MyUiDslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleModel
entryRuleModel
:
{ before(grammarAccess.getModelRule()); }
	 ruleModel
{ after(grammarAccess.getModelRule()); } 
	 EOF 
;

// Rule Model
ruleModel 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getModelAccess().getGroup()); }
		(rule__Model__Group__0)
		{ after(grammarAccess.getModelAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleHead
entryRuleHead
:
{ before(grammarAccess.getHeadRule()); }
	 ruleHead
{ after(grammarAccess.getHeadRule()); } 
	 EOF 
;

// Rule Head
ruleHead 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getHeadAccess().getGroup()); }
		(rule__Head__Group__0)
		{ after(grammarAccess.getHeadAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleHeadType
entryRuleHeadType
:
{ before(grammarAccess.getHeadTypeRule()); }
	 ruleHeadType
{ after(grammarAccess.getHeadTypeRule()); } 
	 EOF 
;

// Rule HeadType
ruleHeadType 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getHeadTypeAccess().getAlternatives()); }
		(rule__HeadType__Alternatives)
		{ after(grammarAccess.getHeadTypeAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBody
entryRuleBody
:
{ before(grammarAccess.getBodyRule()); }
	 ruleBody
{ after(grammarAccess.getBodyRule()); } 
	 EOF 
;

// Rule Body
ruleBody 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBodyAccess().getGroup()); }
		(rule__Body__Group__0)
		{ after(grammarAccess.getBodyAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleNode
entryRuleNode
:
{ before(grammarAccess.getNodeRule()); }
	 ruleNode
{ after(grammarAccess.getNodeRule()); } 
	 EOF 
;

// Rule Node
ruleNode 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getNodeAccess().getNameAssignment()); }
		(rule__Node__NameAssignment)
		{ after(grammarAccess.getNodeAccess().getNameAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSelfRepeat
entryRuleSelfRepeat
:
{ before(grammarAccess.getSelfRepeatRule()); }
	 ruleSelfRepeat
{ after(grammarAccess.getSelfRepeatRule()); } 
	 EOF 
;

// Rule SelfRepeat
ruleSelfRepeat 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSelfRepeatAccess().getGroup()); }
		(rule__SelfRepeat__Group__0)
		{ after(grammarAccess.getSelfRepeatAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAccessory
entryRuleAccessory
:
{ before(grammarAccess.getAccessoryRule()); }
	 ruleAccessory
{ after(grammarAccess.getAccessoryRule()); } 
	 EOF 
;

// Rule Accessory
ruleAccessory 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAccessoryAccess().getGroup()); }
		(rule__Accessory__Group__0)
		{ after(grammarAccess.getAccessoryAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleInnerFeature
entryRuleInnerFeature
:
{ before(grammarAccess.getInnerFeatureRule()); }
	 ruleInnerFeature
{ after(grammarAccess.getInnerFeatureRule()); } 
	 EOF 
;

// Rule InnerFeature
ruleInnerFeature 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getInnerFeatureAccess().getGroup()); }
		(rule__InnerFeature__Group__0)
		{ after(grammarAccess.getInnerFeatureAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleInnerText
entryRuleInnerText
:
{ before(grammarAccess.getInnerTextRule()); }
	 ruleInnerText
{ after(grammarAccess.getInnerTextRule()); } 
	 EOF 
;

// Rule InnerText
ruleInnerText 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getInnerTextAccess().getGroup()); }
		(rule__InnerText__Group__0)
		{ after(grammarAccess.getInnerTextAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleInnerStyle
entryRuleInnerStyle
:
{ before(grammarAccess.getInnerStyleRule()); }
	 ruleInnerStyle
{ after(grammarAccess.getInnerStyleRule()); } 
	 EOF 
;

// Rule InnerStyle
ruleInnerStyle 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getInnerStyleAccess().getGroup()); }
		(rule__InnerStyle__Group__0)
		{ after(grammarAccess.getInnerStyleAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleInnerClass
entryRuleInnerClass
:
{ before(grammarAccess.getInnerClassRule()); }
	 ruleInnerClass
{ after(grammarAccess.getInnerClassRule()); } 
	 EOF 
;

// Rule InnerClass
ruleInnerClass 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getInnerClassAccess().getGroup()); }
		(rule__InnerClass__Group__0)
		{ after(grammarAccess.getInnerClassAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleClassName
entryRuleClassName
:
{ before(grammarAccess.getClassNameRule()); }
	 ruleClassName
{ after(grammarAccess.getClassNameRule()); } 
	 EOF 
;

// Rule ClassName
ruleClassName 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getClassNameAccess().getGroup()); }
		(rule__ClassName__Group__0)
		{ after(grammarAccess.getClassNameAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleClassNameSec
entryRuleClassNameSec
:
{ before(grammarAccess.getClassNameSecRule()); }
	 ruleClassNameSec
{ after(grammarAccess.getClassNameSecRule()); } 
	 EOF 
;

// Rule ClassNameSec
ruleClassNameSec 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getClassNameSecAccess().getGroup()); }
		(rule__ClassNameSec__Group__0)
		{ after(grammarAccess.getClassNameSecAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleInnerType
entryRuleInnerType
:
{ before(grammarAccess.getInnerTypeRule()); }
	 ruleInnerType
{ after(grammarAccess.getInnerTypeRule()); } 
	 EOF 
;

// Rule InnerType
ruleInnerType 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getInnerTypeAccess().getGroup()); }
		(rule__InnerType__Group__0)
		{ after(grammarAccess.getInnerTypeAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCssStyle
entryRuleCssStyle
:
{ before(grammarAccess.getCssStyleRule()); }
	 ruleCssStyle
{ after(grammarAccess.getCssStyleRule()); } 
	 EOF 
;

// Rule CssStyle
ruleCssStyle 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCssStyleAccess().getGroup()); }
		(rule__CssStyle__Group__0)
		{ after(grammarAccess.getCssStyleAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBorder
entryRuleBorder
:
{ before(grammarAccess.getBorderRule()); }
	 ruleBorder
{ after(grammarAccess.getBorderRule()); } 
	 EOF 
;

// Rule Border
ruleBorder 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBorderAccess().getGroup()); }
		(rule__Border__Group__0)
		{ after(grammarAccess.getBorderAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleColor
entryRuleColor
:
{ before(grammarAccess.getColorRule()); }
	 ruleColor
{ after(grammarAccess.getColorRule()); } 
	 EOF 
;

// Rule Color
ruleColor 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getColorAccess().getGroup()); }
		(rule__Color__Group__0)
		{ after(grammarAccess.getColorAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBackColor
entryRuleBackColor
:
{ before(grammarAccess.getBackColorRule()); }
	 ruleBackColor
{ after(grammarAccess.getBackColorRule()); } 
	 EOF 
;

// Rule BackColor
ruleBackColor 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBackColorAccess().getGroup()); }
		(rule__BackColor__Group__0)
		{ after(grammarAccess.getBackColorAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulecolorDef
entryRulecolorDef
:
{ before(grammarAccess.getColorDefRule()); }
	 rulecolorDef
{ after(grammarAccess.getColorDefRule()); } 
	 EOF 
;

// Rule colorDef
rulecolorDef 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getColorDefAccess().getAlternatives()); }
		(rule__ColorDef__Alternatives)
		{ after(grammarAccess.getColorDefAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleLiteralColor
entryRuleLiteralColor
:
{ before(grammarAccess.getLiteralColorRule()); }
	 ruleLiteralColor
{ after(grammarAccess.getLiteralColorRule()); } 
	 EOF 
;

// Rule LiteralColor
ruleLiteralColor 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLiteralColorAccess().getValueAssignment()); }
		(rule__LiteralColor__ValueAssignment)
		{ after(grammarAccess.getLiteralColorAccess().getValueAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRgbaColor
entryRuleRgbaColor
:
{ before(grammarAccess.getRgbaColorRule()); }
	 ruleRgbaColor
{ after(grammarAccess.getRgbaColorRule()); } 
	 EOF 
;

// Rule RgbaColor
ruleRgbaColor 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRgbaColorAccess().getGroup()); }
		(rule__RgbaColor__Group__0)
		{ after(grammarAccess.getRgbaColorAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRval
entryRuleRval
:
{ before(grammarAccess.getRvalRule()); }
	 ruleRval
{ after(grammarAccess.getRvalRule()); } 
	 EOF 
;

// Rule Rval
ruleRval 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRvalAccess().getGroup()); }
		(rule__Rval__Group__0)
		{ after(grammarAccess.getRvalAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleGval
entryRuleGval
:
{ before(grammarAccess.getGvalRule()); }
	 ruleGval
{ after(grammarAccess.getGvalRule()); } 
	 EOF 
;

// Rule Gval
ruleGval 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getGvalAccess().getGroup()); }
		(rule__Gval__Group__0)
		{ after(grammarAccess.getGvalAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBval
entryRuleBval
:
{ before(grammarAccess.getBvalRule()); }
	 ruleBval
{ after(grammarAccess.getBvalRule()); } 
	 EOF 
;

// Rule Bval
ruleBval 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBvalAccess().getGroup()); }
		(rule__Bval__Group__0)
		{ after(grammarAccess.getBvalAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAval
entryRuleAval
:
{ before(grammarAccess.getAvalRule()); }
	 ruleAval
{ after(grammarAccess.getAvalRule()); } 
	 EOF 
;

// Rule Aval
ruleAval 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAvalAccess().getGroup()); }
		(rule__Aval__Group__0)
		{ after(grammarAccess.getAvalAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBorderRad
entryRuleBorderRad
:
{ before(grammarAccess.getBorderRadRule()); }
	 ruleBorderRad
{ after(grammarAccess.getBorderRadRule()); } 
	 EOF 
;

// Rule BorderRad
ruleBorderRad 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBorderRadAccess().getGroup()); }
		(rule__BorderRad__Group__0)
		{ after(grammarAccess.getBorderRadAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePos
entryRulePos
:
{ before(grammarAccess.getPosRule()); }
	 rulePos
{ after(grammarAccess.getPosRule()); } 
	 EOF 
;

// Rule Pos
rulePos 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPosAccess().getGroup()); }
		(rule__Pos__Group__0)
		{ after(grammarAccess.getPosAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFlt
entryRuleFlt
:
{ before(grammarAccess.getFltRule()); }
	 ruleFlt
{ after(grammarAccess.getFltRule()); } 
	 EOF 
;

// Rule Flt
ruleFlt 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFltAccess().getGroup()); }
		(rule__Flt__Group__0)
		{ after(grammarAccess.getFltAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleClr
entryRuleClr
:
{ before(grammarAccess.getClrRule()); }
	 ruleClr
{ after(grammarAccess.getClrRule()); } 
	 EOF 
;

// Rule Clr
ruleClr 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getClrAccess().getGroup()); }
		(rule__Clr__Group__0)
		{ after(grammarAccess.getClrAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDisp
entryRuleDisp
:
{ before(grammarAccess.getDispRule()); }
	 ruleDisp
{ after(grammarAccess.getDispRule()); } 
	 EOF 
;

// Rule Disp
ruleDisp 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDispAccess().getGroup()); }
		(rule__Disp__Group__0)
		{ after(grammarAccess.getDispAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleVerAl
entryRuleVerAl
:
{ before(grammarAccess.getVerAlRule()); }
	 ruleVerAl
{ after(grammarAccess.getVerAlRule()); } 
	 EOF 
;

// Rule VerAl
ruleVerAl 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getVerAlAccess().getGroup()); }
		(rule__VerAl__Group__0)
		{ after(grammarAccess.getVerAlAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleOFlow
entryRuleOFlow
:
{ before(grammarAccess.getOFlowRule()); }
	 ruleOFlow
{ after(grammarAccess.getOFlowRule()); } 
	 EOF 
;

// Rule OFlow
ruleOFlow 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getOFlowAccess().getGroup()); }
		(rule__OFlow__Group__0)
		{ after(grammarAccess.getOFlowAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleWid
entryRuleWid
:
{ before(grammarAccess.getWidRule()); }
	 ruleWid
{ after(grammarAccess.getWidRule()); } 
	 EOF 
;

// Rule Wid
ruleWid 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getWidAccess().getGroup()); }
		(rule__Wid__Group__0)
		{ after(grammarAccess.getWidAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleH8
entryRuleH8
:
{ before(grammarAccess.getH8Rule()); }
	 ruleH8
{ after(grammarAccess.getH8Rule()); } 
	 EOF 
;

// Rule H8
ruleH8 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getH8Access().getGroup()); }
		(rule__H8__Group__0)
		{ after(grammarAccess.getH8Access().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCoord
entryRuleCoord
:
{ before(grammarAccess.getCoordRule()); }
	 ruleCoord
{ after(grammarAccess.getCoordRule()); } 
	 EOF 
;

// Rule Coord
ruleCoord 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCoordAccess().getGroup()); }
		(rule__Coord__Group__0)
		{ after(grammarAccess.getCoordAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMarg
entryRuleMarg
:
{ before(grammarAccess.getMargRule()); }
	 ruleMarg
{ after(grammarAccess.getMargRule()); } 
	 EOF 
;

// Rule Marg
ruleMarg 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMargAccess().getGroup()); }
		(rule__Marg__Group__0)
		{ after(grammarAccess.getMargAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePadd
entryRulePadd
:
{ before(grammarAccess.getPaddRule()); }
	 rulePadd
{ after(grammarAccess.getPaddRule()); } 
	 EOF 
;

// Rule Padd
rulePadd 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPaddAccess().getGroup()); }
		(rule__Padd__Group__0)
		{ after(grammarAccess.getPaddAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMinMaxValue
entryRuleMinMaxValue
:
{ before(grammarAccess.getMinMaxValueRule()); }
	 ruleMinMaxValue
{ after(grammarAccess.getMinMaxValueRule()); } 
	 EOF 
;

// Rule MinMaxValue
ruleMinMaxValue 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMinMaxValueAccess().getGroup()); }
		(rule__MinMaxValue__Group__0)
		{ after(grammarAccess.getMinMaxValueAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMinVal
entryRuleMinVal
:
{ before(grammarAccess.getMinValRule()); }
	 ruleMinVal
{ after(grammarAccess.getMinValRule()); } 
	 EOF 
;

// Rule MinVal
ruleMinVal 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMinValAccess().getGroup()); }
		(rule__MinVal__Group__0)
		{ after(grammarAccess.getMinValAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMaxVal
entryRuleMaxVal
:
{ before(grammarAccess.getMaxValRule()); }
	 ruleMaxVal
{ after(grammarAccess.getMaxValRule()); } 
	 EOF 
;

// Rule MaxVal
ruleMaxVal 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMaxValAccess().getGroup()); }
		(rule__MaxVal__Group__0)
		{ after(grammarAccess.getMaxValAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMidVal
entryRuleMidVal
:
{ before(grammarAccess.getMidValRule()); }
	 ruleMidVal
{ after(grammarAccess.getMidValRule()); } 
	 EOF 
;

// Rule MidVal
ruleMidVal 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMidValAccess().getGroup()); }
		(rule__MidVal__Group__0)
		{ after(grammarAccess.getMidValAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFourAspect
entryRuleFourAspect
:
{ before(grammarAccess.getFourAspectRule()); }
	 ruleFourAspect
{ after(grammarAccess.getFourAspectRule()); } 
	 EOF 
;

// Rule FourAspect
ruleFourAspect 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFourAspectAccess().getGroup()); }
		(rule__FourAspect__Group__0)
		{ after(grammarAccess.getFourAspectAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleLeftAspect
entryRuleLeftAspect
:
{ before(grammarAccess.getLeftAspectRule()); }
	 ruleLeftAspect
{ after(grammarAccess.getLeftAspectRule()); } 
	 EOF 
;

// Rule LeftAspect
ruleLeftAspect 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLeftAspectAccess().getGroup()); }
		(rule__LeftAspect__Group__0)
		{ after(grammarAccess.getLeftAspectAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRightAspect
entryRuleRightAspect
:
{ before(grammarAccess.getRightAspectRule()); }
	 ruleRightAspect
{ after(grammarAccess.getRightAspectRule()); } 
	 EOF 
;

// Rule RightAspect
ruleRightAspect 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRightAspectAccess().getGroup()); }
		(rule__RightAspect__Group__0)
		{ after(grammarAccess.getRightAspectAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleUpAspect
entryRuleUpAspect
:
{ before(grammarAccess.getUpAspectRule()); }
	 ruleUpAspect
{ after(grammarAccess.getUpAspectRule()); } 
	 EOF 
;

// Rule UpAspect
ruleUpAspect 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getUpAspectAccess().getGroup()); }
		(rule__UpAspect__Group__0)
		{ after(grammarAccess.getUpAspectAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDownAspect
entryRuleDownAspect
:
{ before(grammarAccess.getDownAspectRule()); }
	 ruleDownAspect
{ after(grammarAccess.getDownAspectRule()); } 
	 EOF 
;

// Rule DownAspect
ruleDownAspect 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDownAspectAccess().getGroup()); }
		(rule__DownAspect__Group__0)
		{ after(grammarAccess.getDownAspectAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulemeasureType
entryRulemeasureType
:
{ before(grammarAccess.getMeasureTypeRule()); }
	 rulemeasureType
{ after(grammarAccess.getMeasureTypeRule()); } 
	 EOF 
;

// Rule measureType
rulemeasureType 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMeasureTypeAccess().getAlternatives()); }
		(rule__MeasureType__Alternatives)
		{ after(grammarAccess.getMeasureTypeAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule PosVals
rulePosVals
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPosValsAccess().getAlternatives()); }
		(rule__PosVals__Alternatives)
		{ after(grammarAccess.getPosValsAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule FltVals
ruleFltVals
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFltValsAccess().getAlternatives()); }
		(rule__FltVals__Alternatives)
		{ after(grammarAccess.getFltValsAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule ClrVals
ruleClrVals
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getClrValsAccess().getAlternatives()); }
		(rule__ClrVals__Alternatives)
		{ after(grammarAccess.getClrValsAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule DispVals
ruleDispVals
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDispValsAccess().getAlternatives()); }
		(rule__DispVals__Alternatives)
		{ after(grammarAccess.getDispValsAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule VeralVals
ruleVeralVals
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVeralValsAccess().getAlternatives()); }
		(rule__VeralVals__Alternatives)
		{ after(grammarAccess.getVeralValsAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule OFlowVals
ruleOFlowVals
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOFlowValsAccess().getAlternatives()); }
		(rule__OFlowVals__Alternatives)
		{ after(grammarAccess.getOFlowValsAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule InnerTypeArray
ruleInnerTypeArray
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getInnerTypeArrayAccess().getAlternatives()); }
		(rule__InnerTypeArray__Alternatives)
		{ after(grammarAccess.getInnerTypeArrayAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__HeadType__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getHeadTypeAccess().get_CSSKeyword_0()); }
		'_CSS'
		{ after(grammarAccess.getHeadTypeAccess().get_CSSKeyword_0()); }
	)
	|
	(
		{ before(grammarAccess.getHeadTypeAccess().get_JSKeyword_1()); }
		'_JS'
		{ after(grammarAccess.getHeadTypeAccess().get_JSKeyword_1()); }
	)
	|
	(
		{ before(grammarAccess.getHeadTypeAccess().getOneCharTerminalRuleCall_2()); }
		RULE_ONECHAR
		{ after(grammarAccess.getHeadTypeAccess().getOneCharTerminalRuleCall_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CssStyle__Alternatives_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCssStyleAccess().getPosParserRuleCall_0_0()); }
		rulePos
		{ after(grammarAccess.getCssStyleAccess().getPosParserRuleCall_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getCssStyleAccess().getFltParserRuleCall_0_1()); }
		ruleFlt
		{ after(grammarAccess.getCssStyleAccess().getFltParserRuleCall_0_1()); }
	)
	|
	(
		{ before(grammarAccess.getCssStyleAccess().getClrParserRuleCall_0_2()); }
		ruleClr
		{ after(grammarAccess.getCssStyleAccess().getClrParserRuleCall_0_2()); }
	)
	|
	(
		{ before(grammarAccess.getCssStyleAccess().getDispParserRuleCall_0_3()); }
		ruleDisp
		{ after(grammarAccess.getCssStyleAccess().getDispParserRuleCall_0_3()); }
	)
	|
	(
		{ before(grammarAccess.getCssStyleAccess().getVerAlParserRuleCall_0_4()); }
		ruleVerAl
		{ after(grammarAccess.getCssStyleAccess().getVerAlParserRuleCall_0_4()); }
	)
	|
	(
		{ before(grammarAccess.getCssStyleAccess().getWidParserRuleCall_0_5()); }
		ruleWid
		{ after(grammarAccess.getCssStyleAccess().getWidParserRuleCall_0_5()); }
	)
	|
	(
		{ before(grammarAccess.getCssStyleAccess().getH8ParserRuleCall_0_6()); }
		ruleH8
		{ after(grammarAccess.getCssStyleAccess().getH8ParserRuleCall_0_6()); }
	)
	|
	(
		{ before(grammarAccess.getCssStyleAccess().getCoordParserRuleCall_0_7()); }
		ruleCoord
		{ after(grammarAccess.getCssStyleAccess().getCoordParserRuleCall_0_7()); }
	)
	|
	(
		{ before(grammarAccess.getCssStyleAccess().getOFlowParserRuleCall_0_8()); }
		ruleOFlow
		{ after(grammarAccess.getCssStyleAccess().getOFlowParserRuleCall_0_8()); }
	)
	|
	(
		{ before(grammarAccess.getCssStyleAccess().getMargParserRuleCall_0_9()); }
		ruleMarg
		{ after(grammarAccess.getCssStyleAccess().getMargParserRuleCall_0_9()); }
	)
	|
	(
		{ before(grammarAccess.getCssStyleAccess().getPaddParserRuleCall_0_10()); }
		rulePadd
		{ after(grammarAccess.getCssStyleAccess().getPaddParserRuleCall_0_10()); }
	)
	|
	(
		{ before(grammarAccess.getCssStyleAccess().getBorderParserRuleCall_0_11()); }
		ruleBorder
		{ after(grammarAccess.getCssStyleAccess().getBorderParserRuleCall_0_11()); }
	)
	|
	(
		{ before(grammarAccess.getCssStyleAccess().getBorderRadParserRuleCall_0_12()); }
		ruleBorderRad
		{ after(grammarAccess.getCssStyleAccess().getBorderRadParserRuleCall_0_12()); }
	)
	|
	(
		{ before(grammarAccess.getCssStyleAccess().getColorParserRuleCall_0_13()); }
		ruleColor
		{ after(grammarAccess.getCssStyleAccess().getColorParserRuleCall_0_13()); }
	)
	|
	(
		{ before(grammarAccess.getCssStyleAccess().getBackColorParserRuleCall_0_14()); }
		ruleBackColor
		{ after(grammarAccess.getCssStyleAccess().getBackColorParserRuleCall_0_14()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ColorDef__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getColorDefAccess().getLiteralColorParserRuleCall_0()); }
		ruleLiteralColor
		{ after(grammarAccess.getColorDefAccess().getLiteralColorParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getColorDefAccess().getRgbaColorParserRuleCall_1()); }
		ruleRgbaColor
		{ after(grammarAccess.getColorDefAccess().getRgbaColorParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralColor__ValueAlternatives_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLiteralColorAccess().getValueRedKeyword_0_0()); }
		'Red'
		{ after(grammarAccess.getLiteralColorAccess().getValueRedKeyword_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getLiteralColorAccess().getValueBlueKeyword_0_1()); }
		'Blue'
		{ after(grammarAccess.getLiteralColorAccess().getValueBlueKeyword_0_1()); }
	)
	|
	(
		{ before(grammarAccess.getLiteralColorAccess().getValueBlackKeyword_0_2()); }
		'Black'
		{ after(grammarAccess.getLiteralColorAccess().getValueBlackKeyword_0_2()); }
	)
	|
	(
		{ before(grammarAccess.getLiteralColorAccess().getValueGreenKeyword_0_3()); }
		'Green'
		{ after(grammarAccess.getLiteralColorAccess().getValueGreenKeyword_0_3()); }
	)
	|
	(
		{ before(grammarAccess.getLiteralColorAccess().getValueYellowKeyword_0_4()); }
		'Yellow'
		{ after(grammarAccess.getLiteralColorAccess().getValueYellowKeyword_0_4()); }
	)
	|
	(
		{ before(grammarAccess.getLiteralColorAccess().getValuePinkKeyword_0_5()); }
		'Pink'
		{ after(grammarAccess.getLiteralColorAccess().getValuePinkKeyword_0_5()); }
	)
	|
	(
		{ before(grammarAccess.getLiteralColorAccess().getValueBrownKeyword_0_6()); }
		'Brown'
		{ after(grammarAccess.getLiteralColorAccess().getValueBrownKeyword_0_6()); }
	)
	|
	(
		{ before(grammarAccess.getLiteralColorAccess().getValueGoldKeyword_0_7()); }
		'Gold'
		{ after(grammarAccess.getLiteralColorAccess().getValueGoldKeyword_0_7()); }
	)
	|
	(
		{ before(grammarAccess.getLiteralColorAccess().getValueWhiteKeyword_0_8()); }
		'White'
		{ after(grammarAccess.getLiteralColorAccess().getValueWhiteKeyword_0_8()); }
	)
	|
	(
		{ before(grammarAccess.getLiteralColorAccess().getValueGreyKeyword_0_9()); }
		'Grey'
		{ after(grammarAccess.getLiteralColorAccess().getValueGreyKeyword_0_9()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MeasureType__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMeasureTypeAccess().getEmKeyword_0()); }
		'em'
		{ after(grammarAccess.getMeasureTypeAccess().getEmKeyword_0()); }
	)
	|
	(
		{ before(grammarAccess.getMeasureTypeAccess().getPercentSignKeyword_1()); }
		'%'
		{ after(grammarAccess.getMeasureTypeAccess().getPercentSignKeyword_1()); }
	)
	|
	(
		{ before(grammarAccess.getMeasureTypeAccess().getPxKeyword_2()); }
		'px'
		{ after(grammarAccess.getMeasureTypeAccess().getPxKeyword_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PosVals__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPosValsAccess().getStaticEnumLiteralDeclaration_0()); }
		('Static')
		{ after(grammarAccess.getPosValsAccess().getStaticEnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getPosValsAccess().getRelativeEnumLiteralDeclaration_1()); }
		('Relative')
		{ after(grammarAccess.getPosValsAccess().getRelativeEnumLiteralDeclaration_1()); }
	)
	|
	(
		{ before(grammarAccess.getPosValsAccess().getFixedEnumLiteralDeclaration_2()); }
		('Fixed')
		{ after(grammarAccess.getPosValsAccess().getFixedEnumLiteralDeclaration_2()); }
	)
	|
	(
		{ before(grammarAccess.getPosValsAccess().getAbsoluteEnumLiteralDeclaration_3()); }
		('Absolute')
		{ after(grammarAccess.getPosValsAccess().getAbsoluteEnumLiteralDeclaration_3()); }
	)
	|
	(
		{ before(grammarAccess.getPosValsAccess().getSteakyEnumLiteralDeclaration_4()); }
		('Steaky')
		{ after(grammarAccess.getPosValsAccess().getSteakyEnumLiteralDeclaration_4()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FltVals__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFltValsAccess().getLeftEnumLiteralDeclaration_0()); }
		('Left')
		{ after(grammarAccess.getFltValsAccess().getLeftEnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getFltValsAccess().getRightEnumLiteralDeclaration_1()); }
		('Right')
		{ after(grammarAccess.getFltValsAccess().getRightEnumLiteralDeclaration_1()); }
	)
	|
	(
		{ before(grammarAccess.getFltValsAccess().getNoneEnumLiteralDeclaration_2()); }
		('None')
		{ after(grammarAccess.getFltValsAccess().getNoneEnumLiteralDeclaration_2()); }
	)
	|
	(
		{ before(grammarAccess.getFltValsAccess().getStartEnumLiteralDeclaration_3()); }
		('Start')
		{ after(grammarAccess.getFltValsAccess().getStartEnumLiteralDeclaration_3()); }
	)
	|
	(
		{ before(grammarAccess.getFltValsAccess().getEndEnumLiteralDeclaration_4()); }
		('End')
		{ after(grammarAccess.getFltValsAccess().getEndEnumLiteralDeclaration_4()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ClrVals__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getClrValsAccess().getLeftEnumLiteralDeclaration_0()); }
		('Left')
		{ after(grammarAccess.getClrValsAccess().getLeftEnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getClrValsAccess().getRightEnumLiteralDeclaration_1()); }
		('Right')
		{ after(grammarAccess.getClrValsAccess().getRightEnumLiteralDeclaration_1()); }
	)
	|
	(
		{ before(grammarAccess.getClrValsAccess().getBothEnumLiteralDeclaration_2()); }
		('Both')
		{ after(grammarAccess.getClrValsAccess().getBothEnumLiteralDeclaration_2()); }
	)
	|
	(
		{ before(grammarAccess.getClrValsAccess().getNoneEnumLiteralDeclaration_3()); }
		('None')
		{ after(grammarAccess.getClrValsAccess().getNoneEnumLiteralDeclaration_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__DispVals__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDispValsAccess().getBlockEnumLiteralDeclaration_0()); }
		('Block')
		{ after(grammarAccess.getDispValsAccess().getBlockEnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getDispValsAccess().getInlineEnumLiteralDeclaration_1()); }
		('Inline')
		{ after(grammarAccess.getDispValsAccess().getInlineEnumLiteralDeclaration_1()); }
	)
	|
	(
		{ before(grammarAccess.getDispValsAccess().getInBlEnumLiteralDeclaration_2()); }
		('InBl')
		{ after(grammarAccess.getDispValsAccess().getInBlEnumLiteralDeclaration_2()); }
	)
	|
	(
		{ before(grammarAccess.getDispValsAccess().getTableEnumLiteralDeclaration_3()); }
		('Table')
		{ after(grammarAccess.getDispValsAccess().getTableEnumLiteralDeclaration_3()); }
	)
	|
	(
		{ before(grammarAccess.getDispValsAccess().getNoneEnumLiteralDeclaration_4()); }
		('None')
		{ after(grammarAccess.getDispValsAccess().getNoneEnumLiteralDeclaration_4()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VeralVals__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVeralValsAccess().getTopEnumLiteralDeclaration_0()); }
		('Top')
		{ after(grammarAccess.getVeralValsAccess().getTopEnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getVeralValsAccess().getDownEnumLiteralDeclaration_1()); }
		('Down')
		{ after(grammarAccess.getVeralValsAccess().getDownEnumLiteralDeclaration_1()); }
	)
	|
	(
		{ before(grammarAccess.getVeralValsAccess().getCenterEnumLiteralDeclaration_2()); }
		('Center')
		{ after(grammarAccess.getVeralValsAccess().getCenterEnumLiteralDeclaration_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__OFlowVals__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOFlowValsAccess().getScrollEnumLiteralDeclaration_0()); }
		('Scroll')
		{ after(grammarAccess.getOFlowValsAccess().getScrollEnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getOFlowValsAccess().getVisibleEnumLiteralDeclaration_1()); }
		('Visible')
		{ after(grammarAccess.getOFlowValsAccess().getVisibleEnumLiteralDeclaration_1()); }
	)
	|
	(
		{ before(grammarAccess.getOFlowValsAccess().getHiddenEnumLiteralDeclaration_2()); }
		('Hidden')
		{ after(grammarAccess.getOFlowValsAccess().getHiddenEnumLiteralDeclaration_2()); }
	)
	|
	(
		{ before(grammarAccess.getOFlowValsAccess().getAutoEnumLiteralDeclaration_3()); }
		('Auto')
		{ after(grammarAccess.getOFlowValsAccess().getAutoEnumLiteralDeclaration_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__InnerTypeArray__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getInnerTypeArrayAccess().getDivEnumLiteralDeclaration_0()); }
		('Div')
		{ after(grammarAccess.getInnerTypeArrayAccess().getDivEnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getInnerTypeArrayAccess().getParaEnumLiteralDeclaration_1()); }
		('Para')
		{ after(grammarAccess.getInnerTypeArrayAccess().getParaEnumLiteralDeclaration_1()); }
	)
	|
	(
		{ before(grammarAccess.getInnerTypeArrayAccess().getInputEnumLiteralDeclaration_2()); }
		('Input')
		{ after(grammarAccess.getInnerTypeArrayAccess().getInputEnumLiteralDeclaration_2()); }
	)
	|
	(
		{ before(grammarAccess.getInnerTypeArrayAccess().getTableEnumLiteralDeclaration_3()); }
		('Table')
		{ after(grammarAccess.getInnerTypeArrayAccess().getTableEnumLiteralDeclaration_3()); }
	)
	|
	(
		{ before(grammarAccess.getInnerTypeArrayAccess().getTrEnumLiteralDeclaration_4()); }
		('Tr')
		{ after(grammarAccess.getInnerTypeArrayAccess().getTrEnumLiteralDeclaration_4()); }
	)
	|
	(
		{ before(grammarAccess.getInnerTypeArrayAccess().getTdEnumLiteralDeclaration_5()); }
		('Td')
		{ after(grammarAccess.getInnerTypeArrayAccess().getTdEnumLiteralDeclaration_5()); }
	)
	|
	(
		{ before(grammarAccess.getInnerTypeArrayAccess().getImgEnumLiteralDeclaration_6()); }
		('Img')
		{ after(grammarAccess.getInnerTypeArrayAccess().getImgEnumLiteralDeclaration_6()); }
	)
	|
	(
		{ before(grammarAccess.getInnerTypeArrayAccess().getFormEnumLiteralDeclaration_7()); }
		('Form')
		{ after(grammarAccess.getInnerTypeArrayAccess().getFormEnumLiteralDeclaration_7()); }
	)
	|
	(
		{ before(grammarAccess.getInnerTypeArrayAccess().getButtonEnumLiteralDeclaration_8()); }
		('Button')
		{ after(grammarAccess.getInnerTypeArrayAccess().getButtonEnumLiteralDeclaration_8()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Model__Group__0__Impl
	rule__Model__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getModelAccess().getHeadsAssignment_0()); }
	(rule__Model__HeadsAssignment_0)*
	{ after(grammarAccess.getModelAccess().getHeadsAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Model__Group__1__Impl
	rule__Model__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getModelAccess().getVerticalLineKeyword_1()); }
	'|'
	{ after(grammarAccess.getModelAccess().getVerticalLineKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Model__Group__2__Impl
	rule__Model__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getModelAccess().getBodisAssignment_2()); }
		(rule__Model__BodisAssignment_2)
		{ after(grammarAccess.getModelAccess().getBodisAssignment_2()); }
	)
	(
		{ before(grammarAccess.getModelAccess().getBodisAssignment_2()); }
		(rule__Model__BodisAssignment_2)*
		{ after(grammarAccess.getModelAccess().getBodisAssignment_2()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Model__Group__3__Impl
	rule__Model__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getModelAccess().getVerticalLineKeyword_3()); }
	'|'
	{ after(grammarAccess.getModelAccess().getVerticalLineKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Model__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getModelAccess().getAccessoriesAssignment_4()); }
	(rule__Model__AccessoriesAssignment_4)*
	{ after(grammarAccess.getModelAccess().getAccessoriesAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Head__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Head__Group__0__Impl
	rule__Head__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Head__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getHeadAccess().getImportKeyword_0()); }
	'import'
	{ after(grammarAccess.getHeadAccess().getImportKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Head__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Head__Group__1__Impl
	rule__Head__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Head__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getHeadAccess().getFileNameAssignment_1()); }
	(rule__Head__FileNameAssignment_1)
	{ after(grammarAccess.getHeadAccess().getFileNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Head__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Head__Group__2__Impl
	rule__Head__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Head__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getHeadAccess().getAsKeyword_2()); }
	'as'
	{ after(grammarAccess.getHeadAccess().getAsKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Head__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Head__Group__3__Impl
	rule__Head__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Head__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getHeadAccess().getHeadTypeAssignment_3()); }
	(rule__Head__HeadTypeAssignment_3)
	{ after(grammarAccess.getHeadAccess().getHeadTypeAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Head__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Head__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Head__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getHeadAccess().getSemicolonKeyword_4()); }
	';'
	{ after(grammarAccess.getHeadAccess().getSemicolonKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Body__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Body__Group__0__Impl
	rule__Body__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Body__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBodyAccess().getNameAssignment_0()); }
	(rule__Body__NameAssignment_0)
	{ after(grammarAccess.getBodyAccess().getNameAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Body__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Body__Group__1__Impl
	rule__Body__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Body__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBodyAccess().getHyphenMinusGreaterThanSignKeyword_1()); }
	'->'
	{ after(grammarAccess.getBodyAccess().getHyphenMinusGreaterThanSignKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Body__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Body__Group__2__Impl
	rule__Body__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Body__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getBodyAccess().getRightAssignment_2()); }
		(rule__Body__RightAssignment_2)
		{ after(grammarAccess.getBodyAccess().getRightAssignment_2()); }
	)
	(
		{ before(grammarAccess.getBodyAccess().getRightAssignment_2()); }
		(rule__Body__RightAssignment_2)*
		{ after(grammarAccess.getBodyAccess().getRightAssignment_2()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Body__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Body__Group__3__Impl
	rule__Body__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Body__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBodyAccess().getSelfRepeatAssignment_3()); }
	(rule__Body__SelfRepeatAssignment_3)?
	{ after(grammarAccess.getBodyAccess().getSelfRepeatAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Body__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Body__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Body__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBodyAccess().getSemicolonKeyword_4()); }
	';'
	{ after(grammarAccess.getBodyAccess().getSemicolonKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__SelfRepeat__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SelfRepeat__Group__0__Impl
	rule__SelfRepeat__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SelfRepeat__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSelfRepeatAccess().getNumberAssignment_0()); }
	(rule__SelfRepeat__NumberAssignment_0)
	{ after(grammarAccess.getSelfRepeatAccess().getNumberAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SelfRepeat__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SelfRepeat__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SelfRepeat__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSelfRepeatAccess().getVerticalAssignment_1()); }
	(rule__SelfRepeat__VerticalAssignment_1)?
	{ after(grammarAccess.getSelfRepeatAccess().getVerticalAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Accessory__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Accessory__Group__0__Impl
	rule__Accessory__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Accessory__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAccessoryAccess().getLeftAssignment_0()); }
	(rule__Accessory__LeftAssignment_0)
	{ after(grammarAccess.getAccessoryAccess().getLeftAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Accessory__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Accessory__Group__1__Impl
	rule__Accessory__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Accessory__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAccessoryAccess().getColonKeyword_1()); }
	':'
	{ after(grammarAccess.getAccessoryAccess().getColonKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Accessory__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Accessory__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Accessory__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAccessoryAccess().getUnorderedGroup_2()); }
	(rule__Accessory__UnorderedGroup_2)
	{ after(grammarAccess.getAccessoryAccess().getUnorderedGroup_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__InnerFeature__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__InnerFeature__Group__0__Impl
	rule__InnerFeature__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__InnerFeature__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInnerFeatureAccess().getInnerFeatureAction_0()); }
	()
	{ after(grammarAccess.getInnerFeatureAccess().getInnerFeatureAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__InnerFeature__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__InnerFeature__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__InnerFeature__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInnerFeatureAccess().getValueAssignment_1()); }
	(rule__InnerFeature__ValueAssignment_1)
	{ after(grammarAccess.getInnerFeatureAccess().getValueAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__InnerText__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__InnerText__Group__0__Impl
	rule__InnerText__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__InnerText__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInnerTextAccess().getLessThanSignKeyword_0()); }
	'<'
	{ after(grammarAccess.getInnerTextAccess().getLessThanSignKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__InnerText__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__InnerText__Group__1__Impl
	rule__InnerText__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__InnerText__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInnerTextAccess().getValueAssignment_1()); }
	(rule__InnerText__ValueAssignment_1)
	{ after(grammarAccess.getInnerTextAccess().getValueAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__InnerText__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__InnerText__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__InnerText__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInnerTextAccess().getGreaterThanSignKeyword_2()); }
	'>'
	{ after(grammarAccess.getInnerTextAccess().getGreaterThanSignKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__InnerStyle__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__InnerStyle__Group__0__Impl
	rule__InnerStyle__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__InnerStyle__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInnerStyleAccess().getLeftParenthesisKeyword_0()); }
	'('
	{ after(grammarAccess.getInnerStyleAccess().getLeftParenthesisKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__InnerStyle__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__InnerStyle__Group__1__Impl
	rule__InnerStyle__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__InnerStyle__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInnerStyleAccess().getInnerStyleAction_1()); }
	()
	{ after(grammarAccess.getInnerStyleAccess().getInnerStyleAction_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__InnerStyle__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__InnerStyle__Group__2__Impl
	rule__InnerStyle__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__InnerStyle__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInnerStyleAccess().getStylesAssignment_2()); }
	(rule__InnerStyle__StylesAssignment_2)*
	{ after(grammarAccess.getInnerStyleAccess().getStylesAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__InnerStyle__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__InnerStyle__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__InnerStyle__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInnerStyleAccess().getRightParenthesisKeyword_3()); }
	')'
	{ after(grammarAccess.getInnerStyleAccess().getRightParenthesisKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__InnerClass__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__InnerClass__Group__0__Impl
	rule__InnerClass__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__InnerClass__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInnerClassAccess().getLeftSquareBracketKeyword_0()); }
	'['
	{ after(grammarAccess.getInnerClassAccess().getLeftSquareBracketKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__InnerClass__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__InnerClass__Group__1__Impl
	rule__InnerClass__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__InnerClass__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInnerClassAccess().getClazzesAssignment_1()); }
	(rule__InnerClass__ClazzesAssignment_1)
	{ after(grammarAccess.getInnerClassAccess().getClazzesAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__InnerClass__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__InnerClass__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__InnerClass__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInnerClassAccess().getRightSquareBracketKeyword_2()); }
	']'
	{ after(grammarAccess.getInnerClassAccess().getRightSquareBracketKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ClassName__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ClassName__Group__0__Impl
	rule__ClassName__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ClassName__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getClassNameAccess().getTheIdAssignment_0()); }
	(rule__ClassName__TheIdAssignment_0)?
	{ after(grammarAccess.getClassNameAccess().getTheIdAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ClassName__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ClassName__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ClassName__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getClassNameAccess().getClazzAssignment_1()); }
	(rule__ClassName__ClazzAssignment_1)*
	{ after(grammarAccess.getClassNameAccess().getClazzAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ClassNameSec__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ClassNameSec__Group__0__Impl
	rule__ClassNameSec__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ClassNameSec__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getClassNameSecAccess().getCommaKeyword_0()); }
	','
	{ after(grammarAccess.getClassNameSecAccess().getCommaKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ClassNameSec__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ClassNameSec__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ClassNameSec__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getClassNameSecAccess().getCfClazzAssignment_1()); }
	(rule__ClassNameSec__CfClazzAssignment_1)
	{ after(grammarAccess.getClassNameSecAccess().getCfClazzAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__InnerType__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__InnerType__Group__0__Impl
	rule__InnerType__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__InnerType__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInnerTypeAccess().getLeftCurlyBracketKeyword_0()); }
	'{'
	{ after(grammarAccess.getInnerTypeAccess().getLeftCurlyBracketKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__InnerType__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__InnerType__Group__1__Impl
	rule__InnerType__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__InnerType__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInnerTypeAccess().getValueAssignment_1()); }
	(rule__InnerType__ValueAssignment_1)
	{ after(grammarAccess.getInnerTypeAccess().getValueAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__InnerType__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__InnerType__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__InnerType__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInnerTypeAccess().getRightCurlyBracketKeyword_2()); }
	'}'
	{ after(grammarAccess.getInnerTypeAccess().getRightCurlyBracketKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__CssStyle__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CssStyle__Group__0__Impl
	rule__CssStyle__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CssStyle__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCssStyleAccess().getAlternatives_0()); }
	(rule__CssStyle__Alternatives_0)
	{ after(grammarAccess.getCssStyleAccess().getAlternatives_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CssStyle__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CssStyle__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CssStyle__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCssStyleAccess().getSemicolonKeyword_1()); }
	';'
	{ after(grammarAccess.getCssStyleAccess().getSemicolonKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Border__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Border__Group__0__Impl
	rule__Border__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Border__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBorderAccess().getBorderKeyword_0()); }
	'border:'
	{ after(grammarAccess.getBorderAccess().getBorderKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Border__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Border__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Border__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBorderAccess().getValueAssignment_1()); }
	(rule__Border__ValueAssignment_1)
	{ after(grammarAccess.getBorderAccess().getValueAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Color__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Color__Group__0__Impl
	rule__Color__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Color__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getColorAccess().getColorKeyword_0()); }
	'color:'
	{ after(grammarAccess.getColorAccess().getColorKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Color__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Color__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Color__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getColorAccess().getValueAssignment_1()); }
	(rule__Color__ValueAssignment_1)
	{ after(grammarAccess.getColorAccess().getValueAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__BackColor__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BackColor__Group__0__Impl
	rule__BackColor__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BackColor__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBackColorAccess().getBcolorKeyword_0()); }
	'bcolor:'
	{ after(grammarAccess.getBackColorAccess().getBcolorKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BackColor__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BackColor__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BackColor__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBackColorAccess().getValueAssignment_1()); }
	(rule__BackColor__ValueAssignment_1)
	{ after(grammarAccess.getBackColorAccess().getValueAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__RgbaColor__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RgbaColor__Group__0__Impl
	rule__RgbaColor__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RgbaColor__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRgbaColorAccess().getRgbaKeyword_0()); }
	'rgba('
	{ after(grammarAccess.getRgbaColorAccess().getRgbaKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RgbaColor__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RgbaColor__Group__1__Impl
	rule__RgbaColor__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__RgbaColor__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRgbaColorAccess().getUnorderedGroup_1()); }
	(rule__RgbaColor__UnorderedGroup_1)
	{ after(grammarAccess.getRgbaColorAccess().getUnorderedGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RgbaColor__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RgbaColor__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RgbaColor__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRgbaColorAccess().getRightParenthesisKeyword_2()); }
	')'
	{ after(grammarAccess.getRgbaColorAccess().getRightParenthesisKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Rval__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Rval__Group__0__Impl
	rule__Rval__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Rval__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRvalAccess().getValueAssignment_0()); }
	(rule__Rval__ValueAssignment_0)
	{ after(grammarAccess.getRvalAccess().getValueAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Rval__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Rval__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Rval__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRvalAccess().getRedKeyword_1()); }
	'red'
	{ after(grammarAccess.getRvalAccess().getRedKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Gval__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Gval__Group__0__Impl
	rule__Gval__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Gval__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGvalAccess().getValueAssignment_0()); }
	(rule__Gval__ValueAssignment_0)
	{ after(grammarAccess.getGvalAccess().getValueAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Gval__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Gval__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Gval__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGvalAccess().getGrnKeyword_1()); }
	'grn'
	{ after(grammarAccess.getGvalAccess().getGrnKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Bval__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Bval__Group__0__Impl
	rule__Bval__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Bval__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBvalAccess().getValueAssignment_0()); }
	(rule__Bval__ValueAssignment_0)
	{ after(grammarAccess.getBvalAccess().getValueAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Bval__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Bval__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Bval__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBvalAccess().getBluKeyword_1()); }
	'blu'
	{ after(grammarAccess.getBvalAccess().getBluKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Aval__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Aval__Group__0__Impl
	rule__Aval__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Aval__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAvalAccess().getValueAssignment_0()); }
	(rule__Aval__ValueAssignment_0)
	{ after(grammarAccess.getAvalAccess().getValueAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Aval__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Aval__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Aval__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAvalAccess().getAlfaKeyword_1()); }
	'alfa'
	{ after(grammarAccess.getAvalAccess().getAlfaKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__BorderRad__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BorderRad__Group__0__Impl
	rule__BorderRad__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BorderRad__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBorderRadAccess().getArcKeyword_0()); }
	'Arc:'
	{ after(grammarAccess.getBorderRadAccess().getArcKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BorderRad__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BorderRad__Group__1__Impl
	rule__BorderRad__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__BorderRad__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBorderRadAccess().getValueAssignment_1()); }
	(rule__BorderRad__ValueAssignment_1)
	{ after(grammarAccess.getBorderRadAccess().getValueAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BorderRad__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BorderRad__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BorderRad__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBorderRadAccess().getMeasureTypeAssignment_2()); }
	(rule__BorderRad__MeasureTypeAssignment_2)?
	{ after(grammarAccess.getBorderRadAccess().getMeasureTypeAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Pos__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Pos__Group__0__Impl
	rule__Pos__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Pos__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPosAccess().getPosKeyword_0()); }
	'Pos:'
	{ after(grammarAccess.getPosAccess().getPosKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Pos__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Pos__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Pos__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPosAccess().getValueAssignment_1()); }
	(rule__Pos__ValueAssignment_1)
	{ after(grammarAccess.getPosAccess().getValueAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Flt__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Flt__Group__0__Impl
	rule__Flt__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Flt__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFltAccess().getFltKeyword_0()); }
	'Flt:'
	{ after(grammarAccess.getFltAccess().getFltKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Flt__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Flt__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Flt__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFltAccess().getValueAssignment_1()); }
	(rule__Flt__ValueAssignment_1)
	{ after(grammarAccess.getFltAccess().getValueAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Clr__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Clr__Group__0__Impl
	rule__Clr__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Clr__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getClrAccess().getClrKeyword_0()); }
	'Clr:'
	{ after(grammarAccess.getClrAccess().getClrKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Clr__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Clr__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Clr__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getClrAccess().getValueAssignment_1()); }
	(rule__Clr__ValueAssignment_1)
	{ after(grammarAccess.getClrAccess().getValueAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Disp__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Disp__Group__0__Impl
	rule__Disp__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Disp__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDispAccess().getDispKeyword_0()); }
	'Disp:'
	{ after(grammarAccess.getDispAccess().getDispKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Disp__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Disp__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Disp__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDispAccess().getValueAssignment_1()); }
	(rule__Disp__ValueAssignment_1)
	{ after(grammarAccess.getDispAccess().getValueAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__VerAl__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VerAl__Group__0__Impl
	rule__VerAl__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VerAl__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVerAlAccess().getVer_AlKeyword_0()); }
	'Ver_Al:'
	{ after(grammarAccess.getVerAlAccess().getVer_AlKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VerAl__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VerAl__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VerAl__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVerAlAccess().getValueAssignment_1()); }
	(rule__VerAl__ValueAssignment_1)
	{ after(grammarAccess.getVerAlAccess().getValueAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__OFlow__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OFlow__Group__0__Impl
	rule__OFlow__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OFlow__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOFlowAccess().getOFlowKeyword_0()); }
	'OFlow:'
	{ after(grammarAccess.getOFlowAccess().getOFlowKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OFlow__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OFlow__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OFlow__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOFlowAccess().getValueAssignment_1()); }
	(rule__OFlow__ValueAssignment_1)
	{ after(grammarAccess.getOFlowAccess().getValueAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Wid__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Wid__Group__0__Impl
	rule__Wid__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Wid__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWidAccess().getWidKeyword_0()); }
	'Wid:'
	{ after(grammarAccess.getWidAccess().getWidKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Wid__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Wid__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Wid__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWidAccess().getValueAssignment_1()); }
	(rule__Wid__ValueAssignment_1)
	{ after(grammarAccess.getWidAccess().getValueAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__H8__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__H8__Group__0__Impl
	rule__H8__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__H8__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getH8Access().getH8Keyword_0()); }
	'H8:'
	{ after(grammarAccess.getH8Access().getH8Keyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__H8__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__H8__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__H8__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getH8Access().getValueAssignment_1()); }
	(rule__H8__ValueAssignment_1)
	{ after(grammarAccess.getH8Access().getValueAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Coord__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Coord__Group__0__Impl
	rule__Coord__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Coord__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCoordAccess().getCoordKeyword_0()); }
	'Coord:'
	{ after(grammarAccess.getCoordAccess().getCoordKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Coord__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Coord__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Coord__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCoordAccess().getValueAssignment_1()); }
	(rule__Coord__ValueAssignment_1)
	{ after(grammarAccess.getCoordAccess().getValueAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Marg__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Marg__Group__0__Impl
	rule__Marg__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Marg__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMargAccess().getMargKeyword_0()); }
	'Marg:'
	{ after(grammarAccess.getMargAccess().getMargKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Marg__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Marg__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Marg__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMargAccess().getValueAssignment_1()); }
	(rule__Marg__ValueAssignment_1)
	{ after(grammarAccess.getMargAccess().getValueAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Padd__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Padd__Group__0__Impl
	rule__Padd__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Padd__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPaddAccess().getPaddKeyword_0()); }
	'Padd:'
	{ after(grammarAccess.getPaddAccess().getPaddKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Padd__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Padd__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Padd__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPaddAccess().getValueAssignment_1()); }
	(rule__Padd__ValueAssignment_1)
	{ after(grammarAccess.getPaddAccess().getValueAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__MinMaxValue__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MinMaxValue__Group__0__Impl
	rule__MinMaxValue__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MinMaxValue__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMinMaxValueAccess().getMinMaxValueAction_0()); }
	()
	{ after(grammarAccess.getMinMaxValueAccess().getMinMaxValueAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MinMaxValue__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MinMaxValue__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MinMaxValue__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMinMaxValueAccess().getUnorderedGroup_1()); }
	(rule__MinMaxValue__UnorderedGroup_1)
	{ after(grammarAccess.getMinMaxValueAccess().getUnorderedGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__MinVal__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MinVal__Group__0__Impl
	rule__MinVal__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MinVal__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMinValAccess().getValueAssignment_0()); }
	(rule__MinVal__ValueAssignment_0)
	{ after(grammarAccess.getMinValAccess().getValueAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MinVal__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MinVal__Group__1__Impl
	rule__MinVal__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__MinVal__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMinValAccess().getLoKeyword_1()); }
	'lo'
	{ after(grammarAccess.getMinValAccess().getLoKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MinVal__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MinVal__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MinVal__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMinValAccess().getMeasureTypeAssignment_2()); }
	(rule__MinVal__MeasureTypeAssignment_2)?
	{ after(grammarAccess.getMinValAccess().getMeasureTypeAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__MaxVal__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MaxVal__Group__0__Impl
	rule__MaxVal__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MaxVal__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMaxValAccess().getValueAssignment_0()); }
	(rule__MaxVal__ValueAssignment_0)
	{ after(grammarAccess.getMaxValAccess().getValueAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MaxVal__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MaxVal__Group__1__Impl
	rule__MaxVal__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__MaxVal__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMaxValAccess().getHiKeyword_1()); }
	'hi'
	{ after(grammarAccess.getMaxValAccess().getHiKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MaxVal__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MaxVal__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MaxVal__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMaxValAccess().getMeasureTypeAssignment_2()); }
	(rule__MaxVal__MeasureTypeAssignment_2)?
	{ after(grammarAccess.getMaxValAccess().getMeasureTypeAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__MidVal__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MidVal__Group__0__Impl
	rule__MidVal__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MidVal__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMidValAccess().getValueAssignment_0()); }
	(rule__MidVal__ValueAssignment_0)
	{ after(grammarAccess.getMidValAccess().getValueAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MidVal__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MidVal__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MidVal__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMidValAccess().getMeasureTypeAssignment_1()); }
	(rule__MidVal__MeasureTypeAssignment_1)?
	{ after(grammarAccess.getMidValAccess().getMeasureTypeAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__FourAspect__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FourAspect__Group__0__Impl
	rule__FourAspect__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FourAspect__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFourAspectAccess().getFourAspectAction_0()); }
	()
	{ after(grammarAccess.getFourAspectAccess().getFourAspectAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FourAspect__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FourAspect__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FourAspect__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFourAspectAccess().getUnorderedGroup_1()); }
	(rule__FourAspect__UnorderedGroup_1)
	{ after(grammarAccess.getFourAspectAccess().getUnorderedGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__LeftAspect__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LeftAspect__Group__0__Impl
	rule__LeftAspect__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LeftAspect__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLeftAspectAccess().getValueAssignment_0()); }
	(rule__LeftAspect__ValueAssignment_0)
	{ after(grammarAccess.getLeftAspectAccess().getValueAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LeftAspect__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LeftAspect__Group__1__Impl
	rule__LeftAspect__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__LeftAspect__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLeftAspectAccess().getLeKeyword_1()); }
	'le'
	{ after(grammarAccess.getLeftAspectAccess().getLeKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LeftAspect__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LeftAspect__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LeftAspect__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLeftAspectAccess().getMeasureTypeAssignment_2()); }
	(rule__LeftAspect__MeasureTypeAssignment_2)?
	{ after(grammarAccess.getLeftAspectAccess().getMeasureTypeAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__RightAspect__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RightAspect__Group__0__Impl
	rule__RightAspect__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RightAspect__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRightAspectAccess().getValueAssignment_0()); }
	(rule__RightAspect__ValueAssignment_0)
	{ after(grammarAccess.getRightAspectAccess().getValueAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RightAspect__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RightAspect__Group__1__Impl
	rule__RightAspect__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__RightAspect__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRightAspectAccess().getRiKeyword_1()); }
	'ri'
	{ after(grammarAccess.getRightAspectAccess().getRiKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RightAspect__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RightAspect__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RightAspect__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRightAspectAccess().getMeasureTypeAssignment_2()); }
	(rule__RightAspect__MeasureTypeAssignment_2)?
	{ after(grammarAccess.getRightAspectAccess().getMeasureTypeAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__UpAspect__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__UpAspect__Group__0__Impl
	rule__UpAspect__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__UpAspect__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUpAspectAccess().getValueAssignment_0()); }
	(rule__UpAspect__ValueAssignment_0)
	{ after(grammarAccess.getUpAspectAccess().getValueAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__UpAspect__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__UpAspect__Group__1__Impl
	rule__UpAspect__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__UpAspect__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUpAspectAccess().getUpKeyword_1()); }
	'up'
	{ after(grammarAccess.getUpAspectAccess().getUpKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__UpAspect__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__UpAspect__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__UpAspect__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUpAspectAccess().getMeasureTypeAssignment_2()); }
	(rule__UpAspect__MeasureTypeAssignment_2)?
	{ after(grammarAccess.getUpAspectAccess().getMeasureTypeAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__DownAspect__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DownAspect__Group__0__Impl
	rule__DownAspect__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DownAspect__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDownAspectAccess().getValueAssignment_0()); }
	(rule__DownAspect__ValueAssignment_0)
	{ after(grammarAccess.getDownAspectAccess().getValueAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DownAspect__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DownAspect__Group__1__Impl
	rule__DownAspect__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__DownAspect__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDownAspectAccess().getDnKeyword_1()); }
	'dn'
	{ after(grammarAccess.getDownAspectAccess().getDnKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DownAspect__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DownAspect__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DownAspect__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDownAspectAccess().getMeasureTypeAssignment_2()); }
	(rule__DownAspect__MeasureTypeAssignment_2)?
	{ after(grammarAccess.getDownAspectAccess().getMeasureTypeAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Accessory__UnorderedGroup_2
	@init {
		int stackSize = keepStackSize();
		getUnorderedGroupHelper().enter(grammarAccess.getAccessoryAccess().getUnorderedGroup_2());
	}
:
	rule__Accessory__UnorderedGroup_2__0
	?
;
finally {
	getUnorderedGroupHelper().leave(grammarAccess.getAccessoryAccess().getUnorderedGroup_2());
	restoreStackSize(stackSize);
}

rule__Accessory__UnorderedGroup_2__Impl
	@init {
		int stackSize = keepStackSize();
		boolean selected = false;
	}
:
		(
		( 
			{getUnorderedGroupHelper().canSelect(grammarAccess.getAccessoryAccess().getUnorderedGroup_2(), 0)}?=>(
				{
					getUnorderedGroupHelper().select(grammarAccess.getAccessoryAccess().getUnorderedGroup_2(), 0);
				}
				{
					selected = true;
				}
				(
					{ before(grammarAccess.getAccessoryAccess().getTextAssignment_2_0()); }
					(rule__Accessory__TextAssignment_2_0)
					{ after(grammarAccess.getAccessoryAccess().getTextAssignment_2_0()); }
				)
			)
		)|
		( 
			{getUnorderedGroupHelper().canSelect(grammarAccess.getAccessoryAccess().getUnorderedGroup_2(), 1)}?=>(
				{
					getUnorderedGroupHelper().select(grammarAccess.getAccessoryAccess().getUnorderedGroup_2(), 1);
				}
				{
					selected = true;
				}
				(
					{ before(grammarAccess.getAccessoryAccess().getStyleAssignment_2_1()); }
					(rule__Accessory__StyleAssignment_2_1)
					{ after(grammarAccess.getAccessoryAccess().getStyleAssignment_2_1()); }
				)
			)
		)|
		( 
			{getUnorderedGroupHelper().canSelect(grammarAccess.getAccessoryAccess().getUnorderedGroup_2(), 2)}?=>(
				{
					getUnorderedGroupHelper().select(grammarAccess.getAccessoryAccess().getUnorderedGroup_2(), 2);
				}
				{
					selected = true;
				}
				(
					{ before(grammarAccess.getAccessoryAccess().getClazzAssignment_2_2()); }
					(rule__Accessory__ClazzAssignment_2_2)
					{ after(grammarAccess.getAccessoryAccess().getClazzAssignment_2_2()); }
				)
			)
		)|
		( 
			{getUnorderedGroupHelper().canSelect(grammarAccess.getAccessoryAccess().getUnorderedGroup_2(), 3)}?=>(
				{
					getUnorderedGroupHelper().select(grammarAccess.getAccessoryAccess().getUnorderedGroup_2(), 3);
				}
				{
					selected = true;
				}
				(
					{ before(grammarAccess.getAccessoryAccess().getTypeAssignment_2_3()); }
					(rule__Accessory__TypeAssignment_2_3)
					{ after(grammarAccess.getAccessoryAccess().getTypeAssignment_2_3()); }
				)
			)
		)|
		( 
			{getUnorderedGroupHelper().canSelect(grammarAccess.getAccessoryAccess().getUnorderedGroup_2(), 4)}?=>(
				{
					getUnorderedGroupHelper().select(grammarAccess.getAccessoryAccess().getUnorderedGroup_2(), 4);
				}
				{
					selected = true;
				}
				(
					{ before(grammarAccess.getAccessoryAccess().getFeatureAssignment_2_4()); }
					(rule__Accessory__FeatureAssignment_2_4)
					{ after(grammarAccess.getAccessoryAccess().getFeatureAssignment_2_4()); }
				)
			)
		)
		)
;
finally {
	if (selected)
		getUnorderedGroupHelper().returnFromSelection(grammarAccess.getAccessoryAccess().getUnorderedGroup_2());
	restoreStackSize(stackSize);
}

rule__Accessory__UnorderedGroup_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Accessory__UnorderedGroup_2__Impl
	rule__Accessory__UnorderedGroup_2__1?
;
finally {
	restoreStackSize(stackSize);
}

rule__Accessory__UnorderedGroup_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Accessory__UnorderedGroup_2__Impl
	rule__Accessory__UnorderedGroup_2__2?
;
finally {
	restoreStackSize(stackSize);
}

rule__Accessory__UnorderedGroup_2__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Accessory__UnorderedGroup_2__Impl
	rule__Accessory__UnorderedGroup_2__3?
;
finally {
	restoreStackSize(stackSize);
}

rule__Accessory__UnorderedGroup_2__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Accessory__UnorderedGroup_2__Impl
	rule__Accessory__UnorderedGroup_2__4?
;
finally {
	restoreStackSize(stackSize);
}

rule__Accessory__UnorderedGroup_2__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Accessory__UnorderedGroup_2__Impl
;
finally {
	restoreStackSize(stackSize);
}


rule__RgbaColor__UnorderedGroup_1
	@init {
		int stackSize = keepStackSize();
		getUnorderedGroupHelper().enter(grammarAccess.getRgbaColorAccess().getUnorderedGroup_1());
	}
:
	rule__RgbaColor__UnorderedGroup_1__0
	?
;
finally {
	getUnorderedGroupHelper().leave(grammarAccess.getRgbaColorAccess().getUnorderedGroup_1());
	restoreStackSize(stackSize);
}

rule__RgbaColor__UnorderedGroup_1__Impl
	@init {
		int stackSize = keepStackSize();
		boolean selected = false;
	}
:
		(
		( 
			{getUnorderedGroupHelper().canSelect(grammarAccess.getRgbaColorAccess().getUnorderedGroup_1(), 0)}?=>(
				{
					getUnorderedGroupHelper().select(grammarAccess.getRgbaColorAccess().getUnorderedGroup_1(), 0);
				}
				{
					selected = true;
				}
				(
					{ before(grammarAccess.getRgbaColorAccess().getRvalAssignment_1_0()); }
					(rule__RgbaColor__RvalAssignment_1_0)
					{ after(grammarAccess.getRgbaColorAccess().getRvalAssignment_1_0()); }
				)
			)
		)|
		( 
			{getUnorderedGroupHelper().canSelect(grammarAccess.getRgbaColorAccess().getUnorderedGroup_1(), 1)}?=>(
				{
					getUnorderedGroupHelper().select(grammarAccess.getRgbaColorAccess().getUnorderedGroup_1(), 1);
				}
				{
					selected = true;
				}
				(
					{ before(grammarAccess.getRgbaColorAccess().getGvalAssignment_1_1()); }
					(rule__RgbaColor__GvalAssignment_1_1)
					{ after(grammarAccess.getRgbaColorAccess().getGvalAssignment_1_1()); }
				)
			)
		)|
		( 
			{getUnorderedGroupHelper().canSelect(grammarAccess.getRgbaColorAccess().getUnorderedGroup_1(), 2)}?=>(
				{
					getUnorderedGroupHelper().select(grammarAccess.getRgbaColorAccess().getUnorderedGroup_1(), 2);
				}
				{
					selected = true;
				}
				(
					{ before(grammarAccess.getRgbaColorAccess().getBvalAssignment_1_2()); }
					(rule__RgbaColor__BvalAssignment_1_2)
					{ after(grammarAccess.getRgbaColorAccess().getBvalAssignment_1_2()); }
				)
			)
		)|
		( 
			{getUnorderedGroupHelper().canSelect(grammarAccess.getRgbaColorAccess().getUnorderedGroup_1(), 3)}?=>(
				{
					getUnorderedGroupHelper().select(grammarAccess.getRgbaColorAccess().getUnorderedGroup_1(), 3);
				}
				{
					selected = true;
				}
				(
					{ before(grammarAccess.getRgbaColorAccess().getAvalAssignment_1_3()); }
					(rule__RgbaColor__AvalAssignment_1_3)
					{ after(grammarAccess.getRgbaColorAccess().getAvalAssignment_1_3()); }
				)
			)
		)
		)
;
finally {
	if (selected)
		getUnorderedGroupHelper().returnFromSelection(grammarAccess.getRgbaColorAccess().getUnorderedGroup_1());
	restoreStackSize(stackSize);
}

rule__RgbaColor__UnorderedGroup_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RgbaColor__UnorderedGroup_1__Impl
	rule__RgbaColor__UnorderedGroup_1__1?
;
finally {
	restoreStackSize(stackSize);
}

rule__RgbaColor__UnorderedGroup_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RgbaColor__UnorderedGroup_1__Impl
	rule__RgbaColor__UnorderedGroup_1__2?
;
finally {
	restoreStackSize(stackSize);
}

rule__RgbaColor__UnorderedGroup_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RgbaColor__UnorderedGroup_1__Impl
	rule__RgbaColor__UnorderedGroup_1__3?
;
finally {
	restoreStackSize(stackSize);
}

rule__RgbaColor__UnorderedGroup_1__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RgbaColor__UnorderedGroup_1__Impl
;
finally {
	restoreStackSize(stackSize);
}


rule__MinMaxValue__UnorderedGroup_1
	@init {
		int stackSize = keepStackSize();
		getUnorderedGroupHelper().enter(grammarAccess.getMinMaxValueAccess().getUnorderedGroup_1());
	}
:
	rule__MinMaxValue__UnorderedGroup_1__0
	?
;
finally {
	getUnorderedGroupHelper().leave(grammarAccess.getMinMaxValueAccess().getUnorderedGroup_1());
	restoreStackSize(stackSize);
}

rule__MinMaxValue__UnorderedGroup_1__Impl
	@init {
		int stackSize = keepStackSize();
		boolean selected = false;
	}
:
		(
		( 
			{getUnorderedGroupHelper().canSelect(grammarAccess.getMinMaxValueAccess().getUnorderedGroup_1(), 0)}?=>(
				{
					getUnorderedGroupHelper().select(grammarAccess.getMinMaxValueAccess().getUnorderedGroup_1(), 0);
				}
				{
					selected = true;
				}
				(
					{ before(grammarAccess.getMinMaxValueAccess().getMinValAssignment_1_0()); }
					(rule__MinMaxValue__MinValAssignment_1_0)
					{ after(grammarAccess.getMinMaxValueAccess().getMinValAssignment_1_0()); }
				)
			)
		)|
		( 
			{getUnorderedGroupHelper().canSelect(grammarAccess.getMinMaxValueAccess().getUnorderedGroup_1(), 1)}?=>(
				{
					getUnorderedGroupHelper().select(grammarAccess.getMinMaxValueAccess().getUnorderedGroup_1(), 1);
				}
				{
					selected = true;
				}
				(
					{ before(grammarAccess.getMinMaxValueAccess().getMaxValAssignment_1_1()); }
					(rule__MinMaxValue__MaxValAssignment_1_1)
					{ after(grammarAccess.getMinMaxValueAccess().getMaxValAssignment_1_1()); }
				)
			)
		)|
		( 
			{getUnorderedGroupHelper().canSelect(grammarAccess.getMinMaxValueAccess().getUnorderedGroup_1(), 2)}?=>(
				{
					getUnorderedGroupHelper().select(grammarAccess.getMinMaxValueAccess().getUnorderedGroup_1(), 2);
				}
				{
					selected = true;
				}
				(
					{ before(grammarAccess.getMinMaxValueAccess().getMidValAssignment_1_2()); }
					(rule__MinMaxValue__MidValAssignment_1_2)
					{ after(grammarAccess.getMinMaxValueAccess().getMidValAssignment_1_2()); }
				)
			)
		)
		)
;
finally {
	if (selected)
		getUnorderedGroupHelper().returnFromSelection(grammarAccess.getMinMaxValueAccess().getUnorderedGroup_1());
	restoreStackSize(stackSize);
}

rule__MinMaxValue__UnorderedGroup_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MinMaxValue__UnorderedGroup_1__Impl
	rule__MinMaxValue__UnorderedGroup_1__1?
;
finally {
	restoreStackSize(stackSize);
}

rule__MinMaxValue__UnorderedGroup_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MinMaxValue__UnorderedGroup_1__Impl
	rule__MinMaxValue__UnorderedGroup_1__2?
;
finally {
	restoreStackSize(stackSize);
}

rule__MinMaxValue__UnorderedGroup_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MinMaxValue__UnorderedGroup_1__Impl
;
finally {
	restoreStackSize(stackSize);
}


rule__FourAspect__UnorderedGroup_1
	@init {
		int stackSize = keepStackSize();
		getUnorderedGroupHelper().enter(grammarAccess.getFourAspectAccess().getUnorderedGroup_1());
	}
:
	rule__FourAspect__UnorderedGroup_1__0
	?
;
finally {
	getUnorderedGroupHelper().leave(grammarAccess.getFourAspectAccess().getUnorderedGroup_1());
	restoreStackSize(stackSize);
}

rule__FourAspect__UnorderedGroup_1__Impl
	@init {
		int stackSize = keepStackSize();
		boolean selected = false;
	}
:
		(
		( 
			{getUnorderedGroupHelper().canSelect(grammarAccess.getFourAspectAccess().getUnorderedGroup_1(), 0)}?=>(
				{
					getUnorderedGroupHelper().select(grammarAccess.getFourAspectAccess().getUnorderedGroup_1(), 0);
				}
				{
					selected = true;
				}
				(
					{ before(grammarAccess.getFourAspectAccess().getLeftAssignment_1_0()); }
					(rule__FourAspect__LeftAssignment_1_0)
					{ after(grammarAccess.getFourAspectAccess().getLeftAssignment_1_0()); }
				)
			)
		)|
		( 
			{getUnorderedGroupHelper().canSelect(grammarAccess.getFourAspectAccess().getUnorderedGroup_1(), 1)}?=>(
				{
					getUnorderedGroupHelper().select(grammarAccess.getFourAspectAccess().getUnorderedGroup_1(), 1);
				}
				{
					selected = true;
				}
				(
					{ before(grammarAccess.getFourAspectAccess().getRightAssignment_1_1()); }
					(rule__FourAspect__RightAssignment_1_1)
					{ after(grammarAccess.getFourAspectAccess().getRightAssignment_1_1()); }
				)
			)
		)|
		( 
			{getUnorderedGroupHelper().canSelect(grammarAccess.getFourAspectAccess().getUnorderedGroup_1(), 2)}?=>(
				{
					getUnorderedGroupHelper().select(grammarAccess.getFourAspectAccess().getUnorderedGroup_1(), 2);
				}
				{
					selected = true;
				}
				(
					{ before(grammarAccess.getFourAspectAccess().getUpAssignment_1_2()); }
					(rule__FourAspect__UpAssignment_1_2)
					{ after(grammarAccess.getFourAspectAccess().getUpAssignment_1_2()); }
				)
			)
		)|
		( 
			{getUnorderedGroupHelper().canSelect(grammarAccess.getFourAspectAccess().getUnorderedGroup_1(), 3)}?=>(
				{
					getUnorderedGroupHelper().select(grammarAccess.getFourAspectAccess().getUnorderedGroup_1(), 3);
				}
				{
					selected = true;
				}
				(
					{ before(grammarAccess.getFourAspectAccess().getDownAssignment_1_3()); }
					(rule__FourAspect__DownAssignment_1_3)
					{ after(grammarAccess.getFourAspectAccess().getDownAssignment_1_3()); }
				)
			)
		)
		)
;
finally {
	if (selected)
		getUnorderedGroupHelper().returnFromSelection(grammarAccess.getFourAspectAccess().getUnorderedGroup_1());
	restoreStackSize(stackSize);
}

rule__FourAspect__UnorderedGroup_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FourAspect__UnorderedGroup_1__Impl
	rule__FourAspect__UnorderedGroup_1__1?
;
finally {
	restoreStackSize(stackSize);
}

rule__FourAspect__UnorderedGroup_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FourAspect__UnorderedGroup_1__Impl
	rule__FourAspect__UnorderedGroup_1__2?
;
finally {
	restoreStackSize(stackSize);
}

rule__FourAspect__UnorderedGroup_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FourAspect__UnorderedGroup_1__Impl
	rule__FourAspect__UnorderedGroup_1__3?
;
finally {
	restoreStackSize(stackSize);
}

rule__FourAspect__UnorderedGroup_1__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FourAspect__UnorderedGroup_1__Impl
;
finally {
	restoreStackSize(stackSize);
}


rule__Model__HeadsAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModelAccess().getHeadsHeadParserRuleCall_0_0()); }
		ruleHead
		{ after(grammarAccess.getModelAccess().getHeadsHeadParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__BodisAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModelAccess().getBodisBodyParserRuleCall_2_0()); }
		ruleBody
		{ after(grammarAccess.getModelAccess().getBodisBodyParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__AccessoriesAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModelAccess().getAccessoriesAccessoryParserRuleCall_4_0()); }
		ruleAccessory
		{ after(grammarAccess.getModelAccess().getAccessoriesAccessoryParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Head__FileNameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getHeadAccess().getFileNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getHeadAccess().getFileNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Head__HeadTypeAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getHeadAccess().getHeadTypeHeadTypeParserRuleCall_3_0()); }
		ruleHeadType
		{ after(grammarAccess.getHeadAccess().getHeadTypeHeadTypeParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Body__NameAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBodyAccess().getNameNodeParserRuleCall_0_0()); }
		ruleNode
		{ after(grammarAccess.getBodyAccess().getNameNodeParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Body__RightAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBodyAccess().getRightNodeParserRuleCall_2_0()); }
		ruleNode
		{ after(grammarAccess.getBodyAccess().getRightNodeParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Body__SelfRepeatAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBodyAccess().getSelfRepeatSelfRepeatParserRuleCall_3_0()); }
		ruleSelfRepeat
		{ after(grammarAccess.getBodyAccess().getSelfRepeatSelfRepeatParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Node__NameAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNodeAccess().getNameOneCharTerminalRuleCall_0()); }
		RULE_ONECHAR
		{ after(grammarAccess.getNodeAccess().getNameOneCharTerminalRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SelfRepeat__NumberAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSelfRepeatAccess().getNumberINTTerminalRuleCall_0_0()); }
		RULE_INT
		{ after(grammarAccess.getSelfRepeatAccess().getNumberINTTerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SelfRepeat__VerticalAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSelfRepeatAccess().getVerticalAsteriskKeyword_1_0()); }
		(
			{ before(grammarAccess.getSelfRepeatAccess().getVerticalAsteriskKeyword_1_0()); }
			'*'
			{ after(grammarAccess.getSelfRepeatAccess().getVerticalAsteriskKeyword_1_0()); }
		)
		{ after(grammarAccess.getSelfRepeatAccess().getVerticalAsteriskKeyword_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Accessory__LeftAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAccessoryAccess().getLeftNodeParserRuleCall_0_0()); }
		ruleNode
		{ after(grammarAccess.getAccessoryAccess().getLeftNodeParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Accessory__TextAssignment_2_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAccessoryAccess().getTextInnerTextParserRuleCall_2_0_0()); }
		ruleInnerText
		{ after(grammarAccess.getAccessoryAccess().getTextInnerTextParserRuleCall_2_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Accessory__StyleAssignment_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAccessoryAccess().getStyleInnerStyleParserRuleCall_2_1_0()); }
		ruleInnerStyle
		{ after(grammarAccess.getAccessoryAccess().getStyleInnerStyleParserRuleCall_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Accessory__ClazzAssignment_2_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAccessoryAccess().getClazzInnerClassParserRuleCall_2_2_0()); }
		ruleInnerClass
		{ after(grammarAccess.getAccessoryAccess().getClazzInnerClassParserRuleCall_2_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Accessory__TypeAssignment_2_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAccessoryAccess().getTypeInnerTypeParserRuleCall_2_3_0()); }
		ruleInnerType
		{ after(grammarAccess.getAccessoryAccess().getTypeInnerTypeParserRuleCall_2_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Accessory__FeatureAssignment_2_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAccessoryAccess().getFeatureInnerFeatureParserRuleCall_2_4_0()); }
		ruleInnerFeature
		{ after(grammarAccess.getAccessoryAccess().getFeatureInnerFeatureParserRuleCall_2_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__InnerFeature__ValueAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getInnerFeatureAccess().getValueSTRING2TerminalRuleCall_1_0()); }
		RULE_STRING2
		{ after(grammarAccess.getInnerFeatureAccess().getValueSTRING2TerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__InnerText__ValueAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getInnerTextAccess().getValueIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getInnerTextAccess().getValueIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__InnerStyle__StylesAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getInnerStyleAccess().getStylesCssStyleParserRuleCall_2_0()); }
		ruleCssStyle
		{ after(grammarAccess.getInnerStyleAccess().getStylesCssStyleParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__InnerClass__ClazzesAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getInnerClassAccess().getClazzesClassNameParserRuleCall_1_0()); }
		ruleClassName
		{ after(grammarAccess.getInnerClassAccess().getClazzesClassNameParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ClassName__TheIdAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getClassNameAccess().getTheIdIDTerminalRuleCall_0_0()); }
		RULE_ID
		{ after(grammarAccess.getClassNameAccess().getTheIdIDTerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ClassName__ClazzAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getClassNameAccess().getClazzClassNameSecParserRuleCall_1_0()); }
		ruleClassNameSec
		{ after(grammarAccess.getClassNameAccess().getClazzClassNameSecParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ClassNameSec__CfClazzAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getClassNameSecAccess().getCfClazzIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getClassNameSecAccess().getCfClazzIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__InnerType__ValueAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getInnerTypeAccess().getValueInnerTypeArrayEnumRuleCall_1_0()); }
		ruleInnerTypeArray
		{ after(grammarAccess.getInnerTypeAccess().getValueInnerTypeArrayEnumRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Border__ValueAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBorderAccess().getValueColorDefParserRuleCall_1_0()); }
		rulecolorDef
		{ after(grammarAccess.getBorderAccess().getValueColorDefParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Color__ValueAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getColorAccess().getValueColorDefParserRuleCall_1_0()); }
		rulecolorDef
		{ after(grammarAccess.getColorAccess().getValueColorDefParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BackColor__ValueAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBackColorAccess().getValueColorDefParserRuleCall_1_0()); }
		rulecolorDef
		{ after(grammarAccess.getBackColorAccess().getValueColorDefParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralColor__ValueAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLiteralColorAccess().getValueAlternatives_0()); }
		(rule__LiteralColor__ValueAlternatives_0)
		{ after(grammarAccess.getLiteralColorAccess().getValueAlternatives_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RgbaColor__RvalAssignment_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRgbaColorAccess().getRvalRvalParserRuleCall_1_0_0()); }
		ruleRval
		{ after(grammarAccess.getRgbaColorAccess().getRvalRvalParserRuleCall_1_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RgbaColor__GvalAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRgbaColorAccess().getGvalGvalParserRuleCall_1_1_0()); }
		ruleGval
		{ after(grammarAccess.getRgbaColorAccess().getGvalGvalParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RgbaColor__BvalAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRgbaColorAccess().getBvalBvalParserRuleCall_1_2_0()); }
		ruleBval
		{ after(grammarAccess.getRgbaColorAccess().getBvalBvalParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RgbaColor__AvalAssignment_1_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRgbaColorAccess().getAvalAvalParserRuleCall_1_3_0()); }
		ruleAval
		{ after(grammarAccess.getRgbaColorAccess().getAvalAvalParserRuleCall_1_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Rval__ValueAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRvalAccess().getValueINTTerminalRuleCall_0_0()); }
		RULE_INT
		{ after(grammarAccess.getRvalAccess().getValueINTTerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Gval__ValueAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getGvalAccess().getValueINTTerminalRuleCall_0_0()); }
		RULE_INT
		{ after(grammarAccess.getGvalAccess().getValueINTTerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Bval__ValueAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBvalAccess().getValueINTTerminalRuleCall_0_0()); }
		RULE_INT
		{ after(grammarAccess.getBvalAccess().getValueINTTerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Aval__ValueAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAvalAccess().getValueINTTerminalRuleCall_0_0()); }
		RULE_INT
		{ after(grammarAccess.getAvalAccess().getValueINTTerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BorderRad__ValueAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBorderRadAccess().getValueINTTerminalRuleCall_1_0()); }
		RULE_INT
		{ after(grammarAccess.getBorderRadAccess().getValueINTTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BorderRad__MeasureTypeAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBorderRadAccess().getMeasureTypeMeasureTypeParserRuleCall_2_0()); }
		rulemeasureType
		{ after(grammarAccess.getBorderRadAccess().getMeasureTypeMeasureTypeParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Pos__ValueAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPosAccess().getValuePosValsEnumRuleCall_1_0()); }
		rulePosVals
		{ after(grammarAccess.getPosAccess().getValuePosValsEnumRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Flt__ValueAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFltAccess().getValueFltValsEnumRuleCall_1_0()); }
		ruleFltVals
		{ after(grammarAccess.getFltAccess().getValueFltValsEnumRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Clr__ValueAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getClrAccess().getValueClrValsEnumRuleCall_1_0()); }
		ruleClrVals
		{ after(grammarAccess.getClrAccess().getValueClrValsEnumRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Disp__ValueAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDispAccess().getValueDispValsEnumRuleCall_1_0()); }
		ruleDispVals
		{ after(grammarAccess.getDispAccess().getValueDispValsEnumRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VerAl__ValueAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVerAlAccess().getValueVeralValsEnumRuleCall_1_0()); }
		ruleVeralVals
		{ after(grammarAccess.getVerAlAccess().getValueVeralValsEnumRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__OFlow__ValueAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOFlowAccess().getValueOFlowValsEnumRuleCall_1_0()); }
		ruleOFlowVals
		{ after(grammarAccess.getOFlowAccess().getValueOFlowValsEnumRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Wid__ValueAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getWidAccess().getValueMinMaxValueParserRuleCall_1_0()); }
		ruleMinMaxValue
		{ after(grammarAccess.getWidAccess().getValueMinMaxValueParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__H8__ValueAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getH8Access().getValueMinMaxValueParserRuleCall_1_0()); }
		ruleMinMaxValue
		{ after(grammarAccess.getH8Access().getValueMinMaxValueParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Coord__ValueAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCoordAccess().getValueFourAspectParserRuleCall_1_0()); }
		ruleFourAspect
		{ after(grammarAccess.getCoordAccess().getValueFourAspectParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Marg__ValueAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMargAccess().getValueFourAspectParserRuleCall_1_0()); }
		ruleFourAspect
		{ after(grammarAccess.getMargAccess().getValueFourAspectParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Padd__ValueAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPaddAccess().getValueFourAspectParserRuleCall_1_0()); }
		ruleFourAspect
		{ after(grammarAccess.getPaddAccess().getValueFourAspectParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MinMaxValue__MinValAssignment_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMinMaxValueAccess().getMinValMinValParserRuleCall_1_0_0()); }
		ruleMinVal
		{ after(grammarAccess.getMinMaxValueAccess().getMinValMinValParserRuleCall_1_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MinMaxValue__MaxValAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMinMaxValueAccess().getMaxValMaxValParserRuleCall_1_1_0()); }
		ruleMaxVal
		{ after(grammarAccess.getMinMaxValueAccess().getMaxValMaxValParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MinMaxValue__MidValAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMinMaxValueAccess().getMidValMidValParserRuleCall_1_2_0()); }
		ruleMidVal
		{ after(grammarAccess.getMinMaxValueAccess().getMidValMidValParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MinVal__ValueAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMinValAccess().getValueINTTerminalRuleCall_0_0()); }
		RULE_INT
		{ after(grammarAccess.getMinValAccess().getValueINTTerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MinVal__MeasureTypeAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMinValAccess().getMeasureTypeMeasureTypeParserRuleCall_2_0()); }
		rulemeasureType
		{ after(grammarAccess.getMinValAccess().getMeasureTypeMeasureTypeParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MaxVal__ValueAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMaxValAccess().getValueINTTerminalRuleCall_0_0()); }
		RULE_INT
		{ after(grammarAccess.getMaxValAccess().getValueINTTerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MaxVal__MeasureTypeAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMaxValAccess().getMeasureTypeMeasureTypeParserRuleCall_2_0()); }
		rulemeasureType
		{ after(grammarAccess.getMaxValAccess().getMeasureTypeMeasureTypeParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MidVal__ValueAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMidValAccess().getValueINTTerminalRuleCall_0_0()); }
		RULE_INT
		{ after(grammarAccess.getMidValAccess().getValueINTTerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MidVal__MeasureTypeAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMidValAccess().getMeasureTypeMeasureTypeParserRuleCall_1_0()); }
		rulemeasureType
		{ after(grammarAccess.getMidValAccess().getMeasureTypeMeasureTypeParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FourAspect__LeftAssignment_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFourAspectAccess().getLeftLeftAspectParserRuleCall_1_0_0()); }
		ruleLeftAspect
		{ after(grammarAccess.getFourAspectAccess().getLeftLeftAspectParserRuleCall_1_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FourAspect__RightAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFourAspectAccess().getRightRightAspectParserRuleCall_1_1_0()); }
		ruleRightAspect
		{ after(grammarAccess.getFourAspectAccess().getRightRightAspectParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FourAspect__UpAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFourAspectAccess().getUpUpAspectParserRuleCall_1_2_0()); }
		ruleUpAspect
		{ after(grammarAccess.getFourAspectAccess().getUpUpAspectParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FourAspect__DownAssignment_1_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFourAspectAccess().getDownDownAspectParserRuleCall_1_3_0()); }
		ruleDownAspect
		{ after(grammarAccess.getFourAspectAccess().getDownDownAspectParserRuleCall_1_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LeftAspect__ValueAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLeftAspectAccess().getValueINTTerminalRuleCall_0_0()); }
		RULE_INT
		{ after(grammarAccess.getLeftAspectAccess().getValueINTTerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LeftAspect__MeasureTypeAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLeftAspectAccess().getMeasureTypeMeasureTypeParserRuleCall_2_0()); }
		rulemeasureType
		{ after(grammarAccess.getLeftAspectAccess().getMeasureTypeMeasureTypeParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RightAspect__ValueAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRightAspectAccess().getValueINTTerminalRuleCall_0_0()); }
		RULE_INT
		{ after(grammarAccess.getRightAspectAccess().getValueINTTerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RightAspect__MeasureTypeAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRightAspectAccess().getMeasureTypeMeasureTypeParserRuleCall_2_0()); }
		rulemeasureType
		{ after(grammarAccess.getRightAspectAccess().getMeasureTypeMeasureTypeParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__UpAspect__ValueAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getUpAspectAccess().getValueINTTerminalRuleCall_0_0()); }
		RULE_INT
		{ after(grammarAccess.getUpAspectAccess().getValueINTTerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__UpAspect__MeasureTypeAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getUpAspectAccess().getMeasureTypeMeasureTypeParserRuleCall_2_0()); }
		rulemeasureType
		{ after(grammarAccess.getUpAspectAccess().getMeasureTypeMeasureTypeParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__DownAspect__ValueAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDownAspectAccess().getValueINTTerminalRuleCall_0_0()); }
		RULE_INT
		{ after(grammarAccess.getDownAspectAccess().getValueINTTerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__DownAspect__MeasureTypeAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDownAspectAccess().getMeasureTypeMeasureTypeParserRuleCall_2_0()); }
		rulemeasureType
		{ after(grammarAccess.getDownAspectAccess().getMeasureTypeMeasureTypeParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ONECHAR : ('a'..'z'|'A'..'Z');

RULE_STRING2 : '\'' ('\\' .|~(('\\'|'\'')))* '\'';

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
